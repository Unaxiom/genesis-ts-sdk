"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file base.proto (package Genesis, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloneRequest = exports.ReorderItemsRequest = exports.LogbookLogComplete = exports.LogbookLogConciseGenericCreateRequest = exports.LogbookLogConciseSLCCreateRequest = exports.LogbookLogConciseSLC = exports.IdentifierUUID = exports.IdentifierWithSearchKey = exports.IdentifierWithEmailAttributes = exports.IdentifierWithUserComment = exports.IdentifiersList = exports.IdentifierWithSearch = exports.IdentifierZeroable = exports.Identifier = exports.SimpleSearchReq = exports.UploadPictureReq = exports.UpdateOwnPasswordReq = exports.UpdatePasswordReq = exports.ActiveStatus = exports.ApprovalMetadata = exports.EmployeeMetadata = exports.DualQuantitiesResponse = exports.QuantityResponse = exports.CountResponse = exports.CountInSLCStatusRequest = exports.GPSCoordinatesResponse = exports.MonthAndDayFilter = exports.Base64String = exports.ImageResponse = exports.BytesResponse = exports.BooleanResponse = exports.Empty = exports.LOGBOOK_OPERATION = exports.STANDARD_LIFECYCLE_STATUS = exports.SORT_ORDER = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 *
 * Describes the order in which the records need to be returned
 *
 * @generated from enum Genesis.SORT_ORDER
 */
var SORT_ORDER;
(function (SORT_ORDER) {
    /**
     * Fetch results in the ascending order of the provided sort key
     *
     * @generated from enum value: ASCENDING_UNSPECIFIED = 0;
     */
    SORT_ORDER[SORT_ORDER["ASCENDING_UNSPECIFIED"] = 0] = "ASCENDING_UNSPECIFIED";
    /**
     * Fetch results in the descending order of the provided sort key
     *
     * @generated from enum value: DESCENDING = 1;
     */
    SORT_ORDER[SORT_ORDER["DESCENDING"] = 1] = "DESCENDING";
})(SORT_ORDER || (exports.SORT_ORDER = SORT_ORDER = {}));
// Retrieve enum metadata with: proto3.getEnumType(SORT_ORDER)
protobuf_1.proto3.util.setEnumType(SORT_ORDER, "Genesis.SORT_ORDER", [
    { no: 0, name: "ASCENDING_UNSPECIFIED" },
    { no: 1, name: "DESCENDING" },
]);
/**
 *
 * Describes the standard lifecycle status of each record
 *
 * @generated from enum Genesis.STANDARD_LIFECYCLE_STATUS
 */
var STANDARD_LIFECYCLE_STATUS;
(function (STANDARD_LIFECYCLE_STATUS) {
    /**
     * The resource has just been created, and has been sent for verification
     *
     * @generated from enum value: PREVERIFY_UNSPECIFIED = 0;
     */
    STANDARD_LIFECYCLE_STATUS[STANDARD_LIFECYCLE_STATUS["PREVERIFY_UNSPECIFIED"] = 0] = "PREVERIFY_UNSPECIFIED";
    /**
     * The resource has been saved as a draft
     *
     * @generated from enum value: DRAFT = 1;
     */
    STANDARD_LIFECYCLE_STATUS[STANDARD_LIFECYCLE_STATUS["DRAFT"] = 1] = "DRAFT";
    /**
     * The resource has been verified
     *
     * @generated from enum value: VERIFIED = 2;
     */
    STANDARD_LIFECYCLE_STATUS[STANDARD_LIFECYCLE_STATUS["VERIFIED"] = 2] = "VERIFIED";
    /**
     * The resource has been approved
     *
     * @generated from enum value: STANDING = 3;
     */
    STANDARD_LIFECYCLE_STATUS[STANDARD_LIFECYCLE_STATUS["STANDING"] = 3] = "STANDING";
    /**
     * The resource has been sent for revision
     *
     * @generated from enum value: REVISION = 4;
     */
    STANDARD_LIFECYCLE_STATUS[STANDARD_LIFECYCLE_STATUS["REVISION"] = 4] = "REVISION";
    /**
     * The resource has been halted
     *
     * @generated from enum value: HALTED = 5;
     */
    STANDARD_LIFECYCLE_STATUS[STANDARD_LIFECYCLE_STATUS["HALTED"] = 5] = "HALTED";
    /**
     * The resource has been marked as completed
     *
     * @generated from enum value: COMPLETED = 6;
     */
    STANDARD_LIFECYCLE_STATUS[STANDARD_LIFECYCLE_STATUS["COMPLETED"] = 6] = "COMPLETED";
    /**
     * The resource has been discarded
     *
     * @generated from enum value: DISCARDED = 7;
     */
    STANDARD_LIFECYCLE_STATUS[STANDARD_LIFECYCLE_STATUS["DISCARDED"] = 7] = "DISCARDED";
    /**
     * Use this only in filter and search queries so as to retrieve all the records regardless of the status that they are in
     *
     * @generated from enum value: ANY = 10;
     */
    STANDARD_LIFECYCLE_STATUS[STANDARD_LIFECYCLE_STATUS["ANY"] = 10] = "ANY";
})(STANDARD_LIFECYCLE_STATUS || (exports.STANDARD_LIFECYCLE_STATUS = STANDARD_LIFECYCLE_STATUS = {}));
// Retrieve enum metadata with: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS)
protobuf_1.proto3.util.setEnumType(STANDARD_LIFECYCLE_STATUS, "Genesis.STANDARD_LIFECYCLE_STATUS", [
    { no: 0, name: "PREVERIFY_UNSPECIFIED" },
    { no: 1, name: "DRAFT" },
    { no: 2, name: "VERIFIED" },
    { no: 3, name: "STANDING" },
    { no: 4, name: "REVISION" },
    { no: 5, name: "HALTED" },
    { no: 6, name: "COMPLETED" },
    { no: 7, name: "DISCARDED" },
    { no: 10, name: "ANY" },
]);
/**
 *
 * Describes all the possible values within a logbook operation
 *
 * @generated from enum Genesis.LOGBOOK_OPERATION
 */
var LOGBOOK_OPERATION;
(function (LOGBOOK_OPERATION) {
    /**
     * Create a resource
     *
     * @generated from enum value: CREATE_UNSPECIFIED = 0;
     */
    LOGBOOK_OPERATION[LOGBOOK_OPERATION["CREATE_UNSPECIFIED"] = 0] = "CREATE_UNSPECIFIED";
    /**
     * Update a resource
     *
     * @generated from enum value: UPDATE = 1;
     */
    LOGBOOK_OPERATION[LOGBOOK_OPERATION["UPDATE"] = 1] = "UPDATE";
    /**
     * Archive a resource
     *
     * @generated from enum value: ARCHIVE = 2;
     */
    LOGBOOK_OPERATION[LOGBOOK_OPERATION["ARCHIVE"] = 2] = "ARCHIVE";
    /**
     * Restore a resource
     *
     * @generated from enum value: RESTORE = 3;
     */
    LOGBOOK_OPERATION[LOGBOOK_OPERATION["RESTORE"] = 3] = "RESTORE";
})(LOGBOOK_OPERATION || (exports.LOGBOOK_OPERATION = LOGBOOK_OPERATION = {}));
// Retrieve enum metadata with: proto3.getEnumType(LOGBOOK_OPERATION)
protobuf_1.proto3.util.setEnumType(LOGBOOK_OPERATION, "Genesis.LOGBOOK_OPERATION", [
    { no: 0, name: "CREATE_UNSPECIFIED" },
    { no: 1, name: "UPDATE" },
    { no: 2, name: "ARCHIVE" },
    { no: 3, name: "RESTORE" },
]);
/**
 *
 * Describes an empty object
 *
 * @generated from message Genesis.Empty
 */
class Empty extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Empty().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Empty().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Empty().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Empty, a, b);
    }
}
exports.Empty = Empty;
Empty.runtime = protobuf_1.proto3;
Empty.typeName = "Genesis.Empty";
Empty.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 *
 * Describes the boolean response
 *
 * @generated from message Genesis.BooleanResponse
 */
class BooleanResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores if the value is true or false
         *
         * @generated from field: bool value = 1;
         */
        this.value = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BooleanResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BooleanResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BooleanResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BooleanResponse, a, b);
    }
}
exports.BooleanResponse = BooleanResponse;
BooleanResponse.runtime = protobuf_1.proto3;
BooleanResponse.typeName = "Genesis.BooleanResponse";
BooleanResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 *
 * Describes a generic response that consists of bytes as payload
 *
 * @generated from message Genesis.BytesResponse
 */
class BytesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the response content in bytes
         *
         * @generated from field: bytes value = 1;
         */
        this.value = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BytesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BytesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BytesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BytesResponse, a, b);
    }
}
exports.BytesResponse = BytesResponse;
BytesResponse.runtime = protobuf_1.proto3;
BytesResponse.typeName = "Genesis.BytesResponse";
BytesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 *
 * Describes a generic response that consists of info of an image
 *
 * @generated from message Genesis.ImageResponse
 */
class ImageResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the raw image content
         *
         * @generated from field: bytes image = 1;
         */
        this.image = new Uint8Array(0);
        /**
         * Stores the MIME type of the image
         *
         * @generated from field: string mime_type = 2;
         */
        this.mimeType = "";
        /**
         * The timestamp of when the image was captured
         *
         * @generated from field: int64 timestamp = 3;
         */
        this.timestamp = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImageResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImageResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImageResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImageResponse, a, b);
    }
}
exports.ImageResponse = ImageResponse;
ImageResponse.runtime = protobuf_1.proto3;
ImageResponse.typeName = "Genesis.ImageResponse";
ImageResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the message that consists of a base64 string. Useful for relaying an image as a base64 string.
 *
 * @generated from message Genesis.Base64String
 */
class Base64String extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the image as a base64 string
         *
         * @generated from field: string image = 1;
         */
        this.image = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Base64String().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Base64String().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Base64String().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Base64String, a, b);
    }
}
exports.Base64String = Base64String;
Base64String.runtime = protobuf_1.proto3;
Base64String.typeName = "Genesis.Base64String";
Base64String.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the payload that will be used to filter records on the basis of the given month and day
 *
 * @generated from message Genesis.MonthAndDayFilter
 */
class MonthAndDayFilter extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the month (1 for Jan, 2 for Feb, etc.)
         *
         * @generated from field: int64 month = 1;
         */
        this.month = protobuf_1.protoInt64.zero;
        /**
         * Stores the day
         *
         * @generated from field: int64 day = 2;
         */
        this.day = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MonthAndDayFilter().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MonthAndDayFilter().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MonthAndDayFilter().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MonthAndDayFilter, a, b);
    }
}
exports.MonthAndDayFilter = MonthAndDayFilter;
MonthAndDayFilter.runtime = protobuf_1.proto3;
MonthAndDayFilter.typeName = "Genesis.MonthAndDayFilter";
MonthAndDayFilter.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "month", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "day", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes a generic response that represents a GPS coordinate
 *
 * @generated from message Genesis.GPSCoordinatesResponse
 */
class GPSCoordinatesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the latitude
         *
         * @generated from field: double latitude = 1;
         */
        this.latitude = 0;
        /**
         * Stores the longitude
         *
         * @generated from field: double longitude = 2;
         */
        this.longitude = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GPSCoordinatesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GPSCoordinatesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GPSCoordinatesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GPSCoordinatesResponse, a, b);
    }
}
exports.GPSCoordinatesResponse = GPSCoordinatesResponse;
GPSCoordinatesResponse.runtime = protobuf_1.proto3;
GPSCoordinatesResponse.typeName = "Genesis.GPSCoordinatesResponse";
GPSCoordinatesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
/**
 *
 * Describes the payload for a request to determine the count of records in the given status
 *
 * @generated from message Genesis.CountInSLCStatusRequest
 */
class CountInSLCStatusRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Denote if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The standard lifecycle status
         *
         * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 2;
         */
        this.status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountInSLCStatusRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountInSLCStatusRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountInSLCStatusRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountInSLCStatusRequest, a, b);
    }
}
exports.CountInSLCStatusRequest = CountInSLCStatusRequest;
CountInSLCStatusRequest.runtime = protobuf_1.proto3;
CountInSLCStatusRequest.typeName = "Genesis.CountInSLCStatusRequest";
CountInSLCStatusRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
]);
/**
 *
 * Describes the count response
 *
 * @generated from message Genesis.CountResponse
 */
class CountResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of records
         *
         * @generated from field: int64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountResponse, a, b);
    }
}
exports.CountResponse = CountResponse;
CountResponse.runtime = protobuf_1.proto3;
CountResponse.typeName = "Genesis.CountResponse";
CountResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the quantity response
 *
 * @generated from message Genesis.QuantityResponse
 */
class QuantityResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The quantity
         *
         * @generated from field: int64 quantity = 1;
         */
        this.quantity = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QuantityResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QuantityResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QuantityResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QuantityResponse, a, b);
    }
}
exports.QuantityResponse = QuantityResponse;
QuantityResponse.runtime = protobuf_1.proto3;
QuantityResponse.typeName = "Genesis.QuantityResponse";
QuantityResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the dual quantity response. Primary quantity represents quantity in internal UoM and secondary quantity represents quantity in either vendor UoM or client UoM, depending on the context
 *
 * @generated from message Genesis.DualQuantitiesResponse
 */
class DualQuantitiesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Quantity in internal UoM
         *
         * @generated from field: int64 primary_quantity = 1;
         */
        this.primaryQuantity = protobuf_1.protoInt64.zero;
        /**
         * Quantity in either vendor or client UoM
         *
         * @generated from field: int64 secondary_quantity = 2;
         */
        this.secondaryQuantity = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DualQuantitiesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DualQuantitiesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DualQuantitiesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DualQuantitiesResponse, a, b);
    }
}
exports.DualQuantitiesResponse = DualQuantitiesResponse;
DualQuantitiesResponse.runtime = protobuf_1.proto3;
DualQuantitiesResponse.typeName = "Genesis.DualQuantitiesResponse";
DualQuantitiesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "primary_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "secondary_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the employee metadata of each resource
 *
 * @generated from message Genesis.EmployeeMetadata
 */
class EmployeeMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * UUID of the resource
         *
         * @generated from field: bytes uuid = 2;
         */
        this.uuid = new Uint8Array(0);
        /**
         * Stores the username of the user who added this resource
         *
         * @generated from field: string added_by = 3;
         */
        this.addedBy = "";
        /**
         * Represents if the resource is active
         *
         * @generated from field: bool is_active = 4;
         */
        this.isActive = false;
        /**
         * Stores the timestamp of when the resource was created
         *
         * @generated from field: int64 created_at = 5;
         */
        this.createdAt = protobuf_1.protoInt64.zero;
        /**
         * Stores the timestamp of when the resource was last modified
         *
         * @generated from field: int64 modified_at = 6;
         */
        this.modifiedAt = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EmployeeMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EmployeeMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EmployeeMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EmployeeMetadata, a, b);
    }
}
exports.EmployeeMetadata = EmployeeMetadata;
EmployeeMetadata.runtime = protobuf_1.proto3;
EmployeeMetadata.typeName = "Genesis.EmployeeMetadata";
EmployeeMetadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "added_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "modified_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the approval metadata of each resource
 *
 * @generated from message Genesis.ApprovalMetadata
 */
class ApprovalMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the UNIX timestamp of when a resource was approved
         *
         * @generated from field: int64 approved_on = 1;
         */
        this.approvedOn = protobuf_1.protoInt64.zero;
        /**
         * Stores the ID of the user who approved this resource
         *
         * @generated from field: int64 approved_by_user_id = 2;
         */
        this.approvedByUserId = protobuf_1.protoInt64.zero;
        /**
         * Stores the Role ID of the user who approved this resource at the time of approval. This needs to be stored, as the user's role is fluid
         *
         * @generated from field: int64 approver_role_id = 3;
         */
        this.approverRoleId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ApprovalMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ApprovalMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ApprovalMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ApprovalMetadata, a, b);
    }
}
exports.ApprovalMetadata = ApprovalMetadata;
ApprovalMetadata.runtime = protobuf_1.proto3;
ApprovalMetadata.typeName = "Genesis.ApprovalMetadata";
ApprovalMetadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "approved_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the status of the records returned to a request
 *
 * @generated from message Genesis.ActiveStatus
 */
class ActiveStatus extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Used in ViewAll procedural calls, to denote if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ActiveStatus, a, b);
    }
}
exports.ActiveStatus = ActiveStatus;
ActiveStatus.runtime = protobuf_1.proto3;
ActiveStatus.typeName = "Genesis.ActiveStatus";
ActiveStatus.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 *
 * Describes the payload that is required to update the password of a user (by an administrator)
 *
 * @generated from message Genesis.UpdatePasswordReq
 */
class UpdatePasswordReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The ID of the record that needs to be updated
         *
         * @generated from field: int64 id = 2;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * The plain text password using which the user can login
         *
         * @generated from field: string plain_text_password = 10;
         */
        this.plainTextPassword = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdatePasswordReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdatePasswordReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdatePasswordReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdatePasswordReq, a, b);
    }
}
exports.UpdatePasswordReq = UpdatePasswordReq;
UpdatePasswordReq.runtime = protobuf_1.proto3;
UpdatePasswordReq.typeName = "Genesis.UpdatePasswordReq";
UpdatePasswordReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "plain_text_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the payload that is requred to update the user's own password
 *
 * @generated from message Genesis.UpdateOwnPasswordReq
 */
class UpdateOwnPasswordReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The old login password
         *
         * @generated from field: string old_plain_text_password = 3;
         */
        this.oldPlainTextPassword = "";
        /**
         * The new password
         *
         * @generated from field: string plain_text_password = 4;
         */
        this.plainTextPassword = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateOwnPasswordReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateOwnPasswordReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateOwnPasswordReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateOwnPasswordReq, a, b);
    }
}
exports.UpdateOwnPasswordReq = UpdateOwnPasswordReq;
UpdateOwnPasswordReq.runtime = protobuf_1.proto3;
UpdateOwnPasswordReq.typeName = "Genesis.UpdateOwnPasswordReq";
UpdateOwnPasswordReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "old_plain_text_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "plain_text_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the payload that is required to upload a picture associated to a resource (such as profile picture or signature)
 *
 * @generated from message Genesis.UploadPictureReq
 */
class UploadPictureReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The ID of the record that needs to be updated
         *
         * @generated from field: int64 id = 2;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * The base64 encoded image that is to be set as the profile picture
         *
         * @generated from field: string img = 10;
         */
        this.img = "";
        /**
         * The MIME type of the profile picture
         *
         * @generated from field: string mime_type = 11;
         */
        this.mimeType = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UploadPictureReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UploadPictureReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UploadPictureReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UploadPictureReq, a, b);
    }
}
exports.UploadPictureReq = UploadPictureReq;
UploadPictureReq.runtime = protobuf_1.proto3;
UploadPictureReq.typeName = "Genesis.UploadPictureReq";
UploadPictureReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "img", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes a simple search request
 *
 * @generated from message Genesis.SimpleSearchReq
 */
class SimpleSearchReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string search_key = 1;
         */
        this.searchKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SimpleSearchReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SimpleSearchReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SimpleSearchReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SimpleSearchReq, a, b);
    }
}
exports.SimpleSearchReq = SimpleSearchReq;
SimpleSearchReq.runtime = protobuf_1.proto3;
SimpleSearchReq.typeName = "Genesis.SimpleSearchReq";
SimpleSearchReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the standard identifier
 *
 * @generated from message Genesis.Identifier
 */
class Identifier extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Identifier().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Identifier().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Identifier().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Identifier, a, b);
    }
}
exports.Identifier = Identifier;
Identifier.runtime = protobuf_1.proto3;
Identifier.typeName = "Genesis.Identifier";
Identifier.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the standard identifier that can also be a zero
 *
 * @generated from message Genesis.IdentifierZeroable
 */
class IdentifierZeroable extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifierZeroable().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifierZeroable().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifierZeroable().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifierZeroable, a, b);
    }
}
exports.IdentifierZeroable = IdentifierZeroable;
IdentifierZeroable.runtime = protobuf_1.proto3;
IdentifierZeroable.typeName = "Genesis.IdentifierZeroable";
IdentifierZeroable.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the standard identifier along with a search key
 *
 * @generated from message Genesis.IdentifierWithSearch
 */
class IdentifierWithSearch extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * Describes the key with which the search operation needs to be performed
         *
         * @generated from field: string search_key = 2;
         */
        this.searchKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifierWithSearch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifierWithSearch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifierWithSearch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifierWithSearch, a, b);
    }
}
exports.IdentifierWithSearch = IdentifierWithSearch;
IdentifierWithSearch.runtime = protobuf_1.proto3;
IdentifierWithSearch.typeName = "Genesis.IdentifierWithSearch";
IdentifierWithSearch.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the list of standard identifiers, used for identifying associated items
 *
 * @generated from message Genesis.IdentifiersList
 */
class IdentifiersList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of identifiers
         *
         * @generated from field: repeated int64 list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifiersList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifiersList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifiersList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifiersList, a, b);
    }
}
exports.IdentifiersList = IdentifiersList;
IdentifiersList.runtime = protobuf_1.proto3;
IdentifiersList.typeName = "Genesis.IdentifiersList";
IdentifiersList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
]);
/**
 *
 * Describes the standard identifier with a user comment. Useful when an operation needs to be performed, and a user comment needs to be recorded
 *
 * @generated from message Genesis.IdentifierWithUserComment
 */
class IdentifierWithUserComment extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 2;
         */
        this.userComment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifierWithUserComment().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifierWithUserComment().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifierWithUserComment().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifierWithUserComment, a, b);
    }
}
exports.IdentifierWithUserComment = IdentifierWithUserComment;
IdentifierWithUserComment.runtime = protobuf_1.proto3;
IdentifierWithUserComment.typeName = "Genesis.IdentifierWithUserComment";
IdentifierWithUserComment.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the standard identifier with email attributes. Useful when a record (identified by the identifier) needs to be mailed with the given subject, and the list of email addresses.
 *
 * @generated from message Genesis.IdentifierWithEmailAttributes
 */
class IdentifierWithEmailAttributes extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * The subject of the email
         *
         * @generated from field: string subject = 10;
         */
        this.subject = "";
        /**
         * The list of email addresses of the recipients
         *
         * @generated from field: repeated string recipients = 11;
         */
        this.recipients = [];
        /**
         * The body of the email
         *
         * @generated from field: string body = 12;
         */
        this.body = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifierWithEmailAttributes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifierWithEmailAttributes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifierWithEmailAttributes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifierWithEmailAttributes, a, b);
    }
}
exports.IdentifierWithEmailAttributes = IdentifierWithEmailAttributes;
IdentifierWithEmailAttributes.runtime = protobuf_1.proto3;
IdentifierWithEmailAttributes.typeName = "Genesis.IdentifierWithEmailAttributes";
IdentifierWithEmailAttributes.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "recipients", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the standard identifier with a search key. Useful when searching within sub records of a parent item (such as shift group shifts, etc)
 *
 * @generated from message Genesis.IdentifierWithSearchKey
 */
class IdentifierWithSearchKey extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * The search key
         *
         * @generated from field: string search_key = 2;
         */
        this.searchKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifierWithSearchKey().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifierWithSearchKey().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifierWithSearchKey().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifierWithSearchKey, a, b);
    }
}
exports.IdentifierWithSearchKey = IdentifierWithSearchKey;
IdentifierWithSearchKey.runtime = protobuf_1.proto3;
IdentifierWithSearchKey.typeName = "Genesis.IdentifierWithSearchKey";
IdentifierWithSearchKey.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the UUID identifier
 *
 * @generated from message Genesis.IdentifierUUID
 */
class IdentifierUUID extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the resource
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifierUUID().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifierUUID().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifierUUID().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifierUUID, a, b);
    }
}
exports.IdentifierUUID = IdentifierUUID;
IdentifierUUID.runtime = protobuf_1.proto3;
IdentifierUUID.typeName = "Genesis.IdentifierUUID";
IdentifierUUID.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being a standard lifecycle status
 *
 * @generated from message Genesis.LogbookLogConciseSLC
 */
class LogbookLogConciseSLC extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * Stores if the resource is active
         *
         * @generated from field: bool is_active = 2;
         */
        this.isActive = false;
        /**
         * Stores the timestamp of when this resource was created
         *
         * @generated from field: int64 timestamp = 3;
         */
        this.timestamp = protobuf_1.protoInt64.zero;
        /**
         * The UUID of the resource
         *
         * @generated from field: bytes ref_uuid = 10;
         */
        this.refUuid = new Uint8Array(0);
        /**
         * The operation that was performed
         *
         * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS operation = 11;
         */
        this.operation = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;
        /**
         * The username of the user who performed this operation
         *
         * @generated from field: string username = 12;
         */
        this.username = "";
        /**
         * The name of the person who made this entry
         *
         * @generated from field: string name = 13;
         */
        this.name = "";
        /**
         * The ID of the user who made this entry
         *
         * @generated from field: int64 user_id = 14;
         */
        this.userId = protobuf_1.protoInt64.zero;
        /**
         * The comment generated by the application
         *
         * @generated from field: string app_comment = 15;
         */
        this.appComment = "";
        /**
         * The comment entered by the user
         *
         * @generated from field: string user_comment = 16;
         */
        this.userComment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogbookLogConciseSLC().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogbookLogConciseSLC().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogbookLogConciseSLC().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogbookLogConciseSLC, a, b);
    }
}
exports.LogbookLogConciseSLC = LogbookLogConciseSLC;
LogbookLogConciseSLC.runtime = protobuf_1.proto3;
LogbookLogConciseSLC.typeName = "Genesis.LogbookLogConciseSLC";
LogbookLogConciseSLC.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "operation", kind: "enum", T: protobuf_1.proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the parameters that are required to create a standard lifecycle log entry
 *
 * @generated from message Genesis.LogbookLogConciseSLCCreateRequest
 */
class LogbookLogConciseSLCCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the timestamp of when this resource was created
         *
         * @generated from field: int64 timestamp = 3;
         */
        this.timestamp = protobuf_1.protoInt64.zero;
        /**
         * The UUID of the resource
         *
         * @generated from field: bytes ref_uuid = 10;
         */
        this.refUuid = new Uint8Array(0);
        /**
         * The operation that was performed
         *
         * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS operation = 11;
         */
        this.operation = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;
        /**
         * The username of the user who performed this operation
         *
         * @generated from field: string username = 12;
         */
        this.username = "";
        /**
         * The comment generated by the application
         *
         * @generated from field: string app_comment = 13;
         */
        this.appComment = "";
        /**
         * The comment entered by the user
         *
         * @generated from field: string user_comment = 14;
         */
        this.userComment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogbookLogConciseSLCCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogbookLogConciseSLCCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogbookLogConciseSLCCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogbookLogConciseSLCCreateRequest, a, b);
    }
}
exports.LogbookLogConciseSLCCreateRequest = LogbookLogConciseSLCCreateRequest;
LogbookLogConciseSLCCreateRequest.runtime = protobuf_1.proto3;
LogbookLogConciseSLCCreateRequest.typeName = "Genesis.LogbookLogConciseSLCCreateRequest";
LogbookLogConciseSLCCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "operation", kind: "enum", T: protobuf_1.proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the parameters that are required to create a generic lifecycle log entry
 *
 * @generated from message Genesis.LogbookLogConciseGenericCreateRequest
 */
class LogbookLogConciseGenericCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the timestamp of when this resource was created
         *
         * @generated from field: int64 timestamp = 3;
         */
        this.timestamp = protobuf_1.protoInt64.zero;
        /**
         * The UUID of the resource
         *
         * @generated from field: bytes ref_uuid = 10;
         */
        this.refUuid = new Uint8Array(0);
        /**
         * The operation that was performed
         *
         * @generated from field: string operation = 11;
         */
        this.operation = "";
        /**
         * The username of the user who performed this operation
         *
         * @generated from field: string username = 12;
         */
        this.username = "";
        /**
         * The comment generated by the application
         *
         * @generated from field: string app_comment = 13;
         */
        this.appComment = "";
        /**
         * The comment entered by the user
         *
         * @generated from field: string user_comment = 14;
         */
        this.userComment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogbookLogConciseGenericCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogbookLogConciseGenericCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogbookLogConciseGenericCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogbookLogConciseGenericCreateRequest, a, b);
    }
}
exports.LogbookLogConciseGenericCreateRequest = LogbookLogConciseGenericCreateRequest;
LogbookLogConciseGenericCreateRequest.runtime = protobuf_1.proto3;
LogbookLogConciseGenericCreateRequest.typeName = "Genesis.LogbookLogConciseGenericCreateRequest";
LogbookLogConciseGenericCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes each parameter that's part of the logbook (includes historical data of the object)
 *
 * @generated from message Genesis.LogbookLogComplete
 */
class LogbookLogComplete extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the resource
         *
         * @generated from field: bytes ref_uuid = 10;
         */
        this.refUuid = new Uint8Array(0);
        /**
         * The operation that was performed
         *
         * @generated from field: Genesis.LOGBOOK_OPERATION operation = 11;
         */
        this.operation = LOGBOOK_OPERATION.CREATE_UNSPECIFIED;
        /**
         * The username of the user who performed this operation
         *
         * @generated from field: string username = 12;
         */
        this.username = "";
        /**
         * The comment generated by the application
         *
         * @generated from field: string app_comment = 13;
         */
        this.appComment = "";
        /**
         * The comment entered by the user
         *
         * @generated from field: string user_comment = 14;
         */
        this.userComment = "";
        /**
         * The marshalled object at the time the log was created
         *
         * @generated from field: bytes previous_data = 15;
         */
        this.previousData = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogbookLogComplete().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogbookLogComplete().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogbookLogComplete().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogbookLogComplete, a, b);
    }
}
exports.LogbookLogComplete = LogbookLogComplete;
LogbookLogComplete.runtime = protobuf_1.proto3;
LogbookLogComplete.typeName = "Genesis.LogbookLogComplete";
LogbookLogComplete.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "operation", kind: "enum", T: protobuf_1.proto3.getEnumType(LOGBOOK_OPERATION) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "previous_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 *
 * Describes the data model to handle reordering of items
 *
 * @generated from message Genesis.ReorderItemsRequest
 */
class ReorderItemsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * The list of IDs to be stored in the given sequence
         *
         * @generated from field: repeated int64 sequence = 2;
         */
        this.sequence = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ReorderItemsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ReorderItemsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ReorderItemsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ReorderItemsRequest, a, b);
    }
}
exports.ReorderItemsRequest = ReorderItemsRequest;
ReorderItemsRequest.runtime = protobuf_1.proto3;
ReorderItemsRequest.typeName = "Genesis.ReorderItemsRequest";
ReorderItemsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "sequence", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
]);
/**
 *
 * Describes the data model to handle cloning of properties of a source record (denoted by source ID) into a target record (denoted by the target ID)
 *
 * @generated from message Genesis.CloneRequest
 */
class CloneRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The ID of the source record whose properties need to be cloned into the target record
         *
         * @generated from field: int64 source_id = 1;
         */
        this.sourceId = protobuf_1.protoInt64.zero;
        /**
         * The ID of the target record that will store the cloned properties from the source
         *
         * @generated from field: int64 target_id = 2;
         */
        this.targetId = protobuf_1.protoInt64.zero;
        /**
         * Stores if the existing items in the target resource need to be deleted before cloning from the source resource
         *
         * @generated from field: bool delete_existing = 3;
         */
        this.deleteExisting = false;
        /**
         * The comment entered by the user
         *
         * @generated from field: string user_comment = 4;
         */
        this.userComment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CloneRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CloneRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CloneRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CloneRequest, a, b);
    }
}
exports.CloneRequest = CloneRequest;
CloneRequest.runtime = protobuf_1.proto3;
CloneRequest.typeName = "Genesis.CloneRequest";
CloneRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "source_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "target_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "delete_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
