"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file goals.proto (package Genesis, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalsServiceSearchAllReq = exports.GoalsServiceFilterReq = exports.GoalsServiceEntityPaginationReq = exports.GoalsServicePaginationResponse = exports.GoalsServicePaginationReq = exports.GoalItemHistoryRequest = exports.GoalsItemsList = exports.GoalsList = exports.GoalItem = exports.GoalsServiceItemUpdateRequest = exports.GoalsServiceItemCreateRequest = exports.Goal = exports.GoalsServiceUpdateRequest = exports.GoalsServiceCreateRequest = exports.GOAL_SORT_KEY = exports.GOAL_ITEM_INPUT_VALUE_TYPE = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const forms_pb_js_1 = require("./forms_pb.js");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the available input types for a goal item (with possible vbalues being number-absolute, number-percentage, text-input, text-dropdown)
 *
 * @generated from enum Genesis.GOAL_ITEM_INPUT_VALUE_TYPE
 */
var GOAL_ITEM_INPUT_VALUE_TYPE;
(function (GOAL_ITEM_INPUT_VALUE_TYPE) {
    /**
     * Input value type is an absolute number (with min and max defined in number_min_value and number_max_value)
     *
     * @generated from enum value: GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED = 0;
     */
    GOAL_ITEM_INPUT_VALUE_TYPE[GOAL_ITEM_INPUT_VALUE_TYPE["GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED"] = 0] = "GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED";
    /**
     * Input value type is a percentage
     *
     * @generated from enum value: GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_PERCENTAGE = 1;
     */
    GOAL_ITEM_INPUT_VALUE_TYPE[GOAL_ITEM_INPUT_VALUE_TYPE["GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_PERCENTAGE"] = 1] = "GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_PERCENTAGE";
    /**
     * Input value type is a textual input
     *
     * @generated from enum value: GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_INPUT = 2;
     */
    GOAL_ITEM_INPUT_VALUE_TYPE[GOAL_ITEM_INPUT_VALUE_TYPE["GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_INPUT"] = 2] = "GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_INPUT";
    /**
     * Input value type is a dropdown (from the values as defined in text_values)
     *
     * @generated from enum value: GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_DROPDOWN = 3;
     */
    GOAL_ITEM_INPUT_VALUE_TYPE[GOAL_ITEM_INPUT_VALUE_TYPE["GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_DROPDOWN"] = 3] = "GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_DROPDOWN";
})(GOAL_ITEM_INPUT_VALUE_TYPE || (exports.GOAL_ITEM_INPUT_VALUE_TYPE = GOAL_ITEM_INPUT_VALUE_TYPE = {}));
// Retrieve enum metadata with: proto3.getEnumType(GOAL_ITEM_INPUT_VALUE_TYPE)
protobuf_1.proto3.util.setEnumType(GOAL_ITEM_INPUT_VALUE_TYPE, "Genesis.GOAL_ITEM_INPUT_VALUE_TYPE", [
    { no: 0, name: "GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED" },
    { no: 1, name: "GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_PERCENTAGE" },
    { no: 2, name: "GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_INPUT" },
    { no: 3, name: "GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_DROPDOWN" },
]);
/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Genesis.GOAL_SORT_KEY
 */
var GOAL_SORT_KEY;
(function (GOAL_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: GOAL_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    GOAL_SORT_KEY[GOAL_SORT_KEY["GOAL_SORT_KEY_ID_UNSPECIFIED"] = 0] = "GOAL_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: GOAL_SORT_KEY_CREATED_AT = 1;
     */
    GOAL_SORT_KEY[GOAL_SORT_KEY["GOAL_SORT_KEY_CREATED_AT"] = 1] = "GOAL_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: GOAL_SORT_KEY_MODIFIED_AT = 2;
     */
    GOAL_SORT_KEY[GOAL_SORT_KEY["GOAL_SORT_KEY_MODIFIED_AT"] = 2] = "GOAL_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by the approved on timestamp
     *
     * @generated from enum value: GOAL_SORT_KEY_APPROVED_ON = 3;
     */
    GOAL_SORT_KEY[GOAL_SORT_KEY["GOAL_SORT_KEY_APPROVED_ON"] = 3] = "GOAL_SORT_KEY_APPROVED_ON";
    /**
     * Fetch ordered results by the approved by field
     *
     * @generated from enum value: GOAL_SORT_KEY_APPROVED_BY = 4;
     */
    GOAL_SORT_KEY[GOAL_SORT_KEY["GOAL_SORT_KEY_APPROVED_BY"] = 4] = "GOAL_SORT_KEY_APPROVED_BY";
    /**
     * Fetch ordered results by the approver's role ID
     *
     * @generated from enum value: GOAL_SORT_KEY_APPROVER_ROLE_ID = 5;
     */
    GOAL_SORT_KEY[GOAL_SORT_KEY["GOAL_SORT_KEY_APPROVER_ROLE_ID"] = 5] = "GOAL_SORT_KEY_APPROVER_ROLE_ID";
    /**
     * Fetch ordered results by the approver's completed on timestamp
     *
     * @generated from enum value: GOAL_SORT_KEY_COMPLETED_ON = 6;
     */
    GOAL_SORT_KEY[GOAL_SORT_KEY["GOAL_SORT_KEY_COMPLETED_ON"] = 6] = "GOAL_SORT_KEY_COMPLETED_ON";
    /**
     * Fetch ordered results by the reference ID
     *
     * @generated from enum value: GOAL_SORT_KEY_REFERENCE_ID = 10;
     */
    GOAL_SORT_KEY[GOAL_SORT_KEY["GOAL_SORT_KEY_REFERENCE_ID"] = 10] = "GOAL_SORT_KEY_REFERENCE_ID";
    /**
     * Fetch ordered results by the final ref number
     *
     * @generated from enum value: GOAL_SORT_KEY_FINAL_REF_NUMBER = 11;
     */
    GOAL_SORT_KEY[GOAL_SORT_KEY["GOAL_SORT_KEY_FINAL_REF_NUMBER"] = 11] = "GOAL_SORT_KEY_FINAL_REF_NUMBER";
})(GOAL_SORT_KEY || (exports.GOAL_SORT_KEY = GOAL_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(GOAL_SORT_KEY)
protobuf_1.proto3.util.setEnumType(GOAL_SORT_KEY, "Genesis.GOAL_SORT_KEY", [
    { no: 0, name: "GOAL_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "GOAL_SORT_KEY_CREATED_AT" },
    { no: 2, name: "GOAL_SORT_KEY_MODIFIED_AT" },
    { no: 3, name: "GOAL_SORT_KEY_APPROVED_ON" },
    { no: 4, name: "GOAL_SORT_KEY_APPROVED_BY" },
    { no: 5, name: "GOAL_SORT_KEY_APPROVER_ROLE_ID" },
    { no: 6, name: "GOAL_SORT_KEY_COMPLETED_ON" },
    { no: 10, name: "GOAL_SORT_KEY_REFERENCE_ID" },
    { no: 11, name: "GOAL_SORT_KEY_FINAL_REF_NUMBER" },
]);
/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Genesis.GoalsServiceCreateRequest
 */
class GoalsServiceCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores a globally unique entity UUID. This will be set at the organization level
         *
         * @generated from field: string entity_uuid = 1;
         */
        this.entityUuid = "";
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 2;
         */
        this.userComment = "";
        /**
         * The associated vault folder ID
         *
         * @generated from field: int64 vault_folder_id = 9;
         */
        this.vaultFolderId = protobuf_1.protoInt64.zero;
        /**
         * The reference ID of the goal
         *
         * @generated from field: string reference_id = 10;
         */
        this.referenceId = "";
        /**
         * The associated user ID
         *
         * @generated from field: int64 user_id = 12;
         */
        this.userId = protobuf_1.protoInt64.zero;
        /**
         * The date from which the goal comes into force
         *
         * @generated from field: string start_date = 13;
         */
        this.startDate = "";
        /**
         * The date until which the goal remains into force
         *
         * @generated from field: string end_date = 14;
         */
        this.endDate = "";
        /**
         * The description of the goal
         *
         * @generated from field: string description = 20;
         */
        this.description = "";
        /**
         * The list of dynamic forms
         *
         * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
         */
        this.formData = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsServiceCreateRequest, a, b);
    }
}
exports.GoalsServiceCreateRequest = GoalsServiceCreateRequest;
GoalsServiceCreateRequest.runtime = protobuf_1.proto3;
GoalsServiceCreateRequest.typeName = "Genesis.GoalsServiceCreateRequest";
GoalsServiceCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "start_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "end_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: forms_pb_js_1.FormFieldDatumCreateRequest, repeated: true },
]);
/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Genesis.GoalsServiceUpdateRequest
 */
class GoalsServiceUpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The ID of the record that needs to be updated
         *
         * @generated from field: int64 id = 2;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
         *
         * @generated from field: bool notify_users = 3;
         */
        this.notifyUsers = false;
        /**
         * The associated vault folder ID
         *
         * @generated from field: int64 vault_folder_id = 9;
         */
        this.vaultFolderId = protobuf_1.protoInt64.zero;
        /**
         * The reference ID of the goal
         *
         * @generated from field: string reference_id = 10;
         */
        this.referenceId = "";
        /**
         * The date from which the goal comes into force
         *
         * @generated from field: string start_date = 13;
         */
        this.startDate = "";
        /**
         * The date until which the goal remains into force
         *
         * @generated from field: string end_date = 14;
         */
        this.endDate = "";
        /**
         * The description of the goal
         *
         * @generated from field: string description = 20;
         */
        this.description = "";
        /**
         * The list of dynamic forms
         *
         * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
         */
        this.formData = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsServiceUpdateRequest, a, b);
    }
}
exports.GoalsServiceUpdateRequest = GoalsServiceUpdateRequest;
GoalsServiceUpdateRequest.runtime = protobuf_1.proto3;
GoalsServiceUpdateRequest.typeName = "Genesis.GoalsServiceUpdateRequest";
GoalsServiceUpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "start_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "end_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: forms_pb_js_1.FormFieldDatumCreateRequest, repeated: true },
]);
/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Genesis.Goal
 */
class Goal extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores a globally unique entity UUID. This will be set at the organization level
         *
         * @generated from field: string entity_uuid = 1;
         */
        this.entityUuid = "";
        /**
         * The status of this goal
         *
         * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 4;
         */
        this.status = base_pb_js_1.STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;
        /**
         * Stores the logs of every operation performed on this goal
         *
         * @generated from field: repeated Genesis.LogbookLogConciseSLC logs = 5;
         */
        this.logs = [];
        /**
         * The timestamp of when this goal was marked as completed
         *
         * @generated from field: int64 completed_on = 6;
         */
        this.completedOn = protobuf_1.protoInt64.zero;
        /**
         * The associated vault folder ID
         *
         * @generated from field: int64 vault_folder_id = 9;
         */
        this.vaultFolderId = protobuf_1.protoInt64.zero;
        /**
         * The reference ID of the goal
         *
         * @generated from field: string reference_id = 10;
         */
        this.referenceId = "";
        /**
         * The unique reference number that has been automatically generated
         *
         * @generated from field: string final_ref_number = 11;
         */
        this.finalRefNumber = "";
        /**
         * The associated user ID
         *
         * @generated from field: int64 user_id = 12;
         */
        this.userId = protobuf_1.protoInt64.zero;
        /**
         * The date from which the goal comes into force
         *
         * @generated from field: string start_date = 13;
         */
        this.startDate = "";
        /**
         * The date until which the goal remains into force
         *
         * @generated from field: string end_date = 14;
         */
        this.endDate = "";
        /**
         * The description of the goal
         *
         * @generated from field: string description = 20;
         */
        this.description = "";
        /**
         * The list of associated goal items
         *
         * @generated from field: repeated Genesis.GoalItem list = 30;
         */
        this.list = [];
        /**
         * The list of dynamic forms
         *
         * @generated from field: repeated Genesis.FormFieldDatum form_data = 40;
         */
        this.formData = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Goal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Goal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Goal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Goal, a, b);
    }
}
exports.Goal = Goal;
Goal.runtime = protobuf_1.proto3;
Goal.typeName = "Genesis.Goal";
Goal.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: base_pb_js_1.EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: base_pb_js_1.ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: base_pb_js_1.LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "start_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "end_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "list", kind: "message", T: GoalItem, repeated: true },
    { no: 40, name: "form_data", kind: "message", T: forms_pb_js_1.FormFieldDatum, repeated: true },
]);
/**
 *
 * Describes the parameters required to add an item to a goal
 *
 * @generated from message Genesis.GoalsServiceItemCreateRequest
 */
class GoalsServiceItemCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * Stores the goal ID
         *
         * @generated from field: int64 goal_id = 10;
         */
        this.goalId = protobuf_1.protoInt64.zero;
        /**
         * Stores the name of the item
         *
         * @generated from field: string name = 11;
         */
        this.name = "";
        /**
         * Stores an optional label
         *
         * @generated from field: int64 label_id = 12;
         */
        this.labelId = protobuf_1.protoInt64.zero;
        /**
         * The specifications of the item
         *
         * @generated from field: string specifications = 13;
         */
        this.specifications = "";
        /**
         * The input value type of the item
         *
         * @generated from field: Genesis.GOAL_ITEM_INPUT_VALUE_TYPE input_value_type = 20;
         */
        this.inputValueType = GOAL_ITEM_INPUT_VALUE_TYPE.GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED;
        /**
         * The minimum value (in cents) in case the input value type is number-absolute or number-percentage
         *
         * @generated from field: int64 number_min_value = 21;
         */
        this.numberMinValue = protobuf_1.protoInt64.zero;
        /**
         * The maximum value (in cents) in case the input value type is number-absolute or number-percentage
         *
         * @generated from field: int64 number_max_value = 22;
         */
        this.numberMaxValue = protobuf_1.protoInt64.zero;
        /**
         * The acceptable value of the item in case input_value_type is of number type
         *
         * @generated from field: int64 number_acceptable_value = 23;
         */
        this.numberAcceptableValue = protobuf_1.protoInt64.zero;
        /**
         * The possible values from which a user can choose in case the input type is text-dropdown
         *
         * @generated from field: repeated string text_values = 30;
         */
        this.textValues = [];
        /**
         * The acceptable value of the item in case input_value_type is of text type
         *
         * @generated from field: string text_acceptable_value = 31;
         */
        this.textAcceptableValue = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsServiceItemCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsServiceItemCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsServiceItemCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsServiceItemCreateRequest, a, b);
    }
}
exports.GoalsServiceItemCreateRequest = GoalsServiceItemCreateRequest;
GoalsServiceItemCreateRequest.runtime = protobuf_1.proto3;
GoalsServiceItemCreateRequest.typeName = "Genesis.GoalsServiceItemCreateRequest";
GoalsServiceItemCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "goal_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "label_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "input_value_type", kind: "enum", T: protobuf_1.proto3.getEnumType(GOAL_ITEM_INPUT_VALUE_TYPE) },
    { no: 21, name: "number_min_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_max_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the parameters required to update an item in a goal
 *
 * @generated from message Genesis.GoalsServiceItemUpdateRequest
 */
class GoalsServiceItemUpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The ID of the record
         *
         * @generated from field: int64 id = 2;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * Stores the name of the item
         *
         * @generated from field: string name = 11;
         */
        this.name = "";
        /**
         * Stores an optional label
         *
         * @generated from field: int64 label_id = 12;
         */
        this.labelId = protobuf_1.protoInt64.zero;
        /**
         * The specifications of the item
         *
         * @generated from field: string specifications = 13;
         */
        this.specifications = "";
        /**
         * The input value type of the item
         *
         * @generated from field: Genesis.GOAL_ITEM_INPUT_VALUE_TYPE input_value_type = 20;
         */
        this.inputValueType = GOAL_ITEM_INPUT_VALUE_TYPE.GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED;
        /**
         * The minimum value (in cents) in case the input value type is number-absolute or number-percentage
         *
         * @generated from field: int64 number_min_value = 21;
         */
        this.numberMinValue = protobuf_1.protoInt64.zero;
        /**
         * The maximum value (in cents) in case the input value type is number-absolute or number-percentage
         *
         * @generated from field: int64 number_max_value = 22;
         */
        this.numberMaxValue = protobuf_1.protoInt64.zero;
        /**
         * The acceptable value of the item in case input_value_type is of number type
         *
         * @generated from field: int64 number_acceptable_value = 23;
         */
        this.numberAcceptableValue = protobuf_1.protoInt64.zero;
        /**
         * The possible values from which a user can choose in case the input type is text-dropdown
         *
         * @generated from field: repeated string text_values = 30;
         */
        this.textValues = [];
        /**
         * The acceptable value of the item in case input_value_type is of text type
         *
         * @generated from field: string text_acceptable_value = 31;
         */
        this.textAcceptableValue = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsServiceItemUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsServiceItemUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsServiceItemUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsServiceItemUpdateRequest, a, b);
    }
}
exports.GoalsServiceItemUpdateRequest = GoalsServiceItemUpdateRequest;
GoalsServiceItemUpdateRequest.runtime = protobuf_1.proto3;
GoalsServiceItemUpdateRequest.typeName = "Genesis.GoalsServiceItemUpdateRequest";
GoalsServiceItemUpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "label_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "input_value_type", kind: "enum", T: protobuf_1.proto3.getEnumType(GOAL_ITEM_INPUT_VALUE_TYPE) },
    { no: 21, name: "number_min_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_max_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the parameters that constitute an item associated to a goal
 *
 * @generated from message Genesis.GoalItem
 */
class GoalItem extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores a globally unique entity UUID. This will be set at the organization level
         *
         * @generated from field: string entity_uuid = 1;
         */
        this.entityUuid = "";
        /**
         * Denotes if this record requires approval (or has been approved)
         *
         * @generated from field: bool need_approval = 4;
         */
        this.needApproval = false;
        /**
         * Stores any comment that the user might have added during an operation
         *
         * @generated from field: string user_comment = 5;
         */
        this.userComment = "";
        /**
         * Stores the goal ID
         *
         * @generated from field: int64 goal_id = 10;
         */
        this.goalId = protobuf_1.protoInt64.zero;
        /**
         * Stores the name of the item
         *
         * @generated from field: string name = 11;
         */
        this.name = "";
        /**
         * Stores an optional label
         *
         * @generated from field: int64 label_id = 12;
         */
        this.labelId = protobuf_1.protoInt64.zero;
        /**
         * The specifications of the item
         *
         * @generated from field: string specifications = 13;
         */
        this.specifications = "";
        /**
         * The input value type of the item
         *
         * @generated from field: Genesis.GOAL_ITEM_INPUT_VALUE_TYPE input_value_type = 20;
         */
        this.inputValueType = GOAL_ITEM_INPUT_VALUE_TYPE.GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED;
        /**
         * The minimum value (in cents) in case the input value type is number-absolute or number-percentage
         *
         * @generated from field: int64 number_min_value = 21;
         */
        this.numberMinValue = protobuf_1.protoInt64.zero;
        /**
         * The maximum value (in cents) in case the input value type is number-absolute or number-percentage
         *
         * @generated from field: int64 number_max_value = 22;
         */
        this.numberMaxValue = protobuf_1.protoInt64.zero;
        /**
         * The acceptable value of the item in case input_value_type is of number type
         *
         * @generated from field: int64 number_acceptable_value = 23;
         */
        this.numberAcceptableValue = protobuf_1.protoInt64.zero;
        /**
         * The possible values from which a user can choose in case the input type is text-dropdown
         *
         * @generated from field: repeated string text_values = 30;
         */
        this.textValues = [];
        /**
         * The acceptable value of the item in case input_value_type is of text type
         *
         * @generated from field: string text_acceptable_value = 31;
         */
        this.textAcceptableValue = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalItem().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalItem().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalItem().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalItem, a, b);
    }
}
exports.GoalItem = GoalItem;
GoalItem.runtime = protobuf_1.proto3;
GoalItem.typeName = "Genesis.GoalItem";
GoalItem.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: base_pb_js_1.EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: base_pb_js_1.ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "goal_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "label_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "input_value_type", kind: "enum", T: protobuf_1.proto3.getEnumType(GOAL_ITEM_INPUT_VALUE_TYPE) },
    { no: 21, name: "number_min_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_max_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the message consisting of the list of goals
 *
 * @generated from message Genesis.GoalsList
 */
class GoalsList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of records
         *
         * @generated from field: repeated Genesis.Goal list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsList, a, b);
    }
}
exports.GoalsList = GoalsList;
GoalsList.runtime = protobuf_1.proto3;
GoalsList.typeName = "Genesis.GoalsList";
GoalsList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Goal, repeated: true },
]);
/**
 *
 * Describes the message consisting of the list of goal items
 *
 * @generated from message Genesis.GoalsItemsList
 */
class GoalsItemsList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of records
         *
         * @generated from field: repeated Genesis.GoalItem list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsItemsList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsItemsList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsItemsList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsItemsList, a, b);
    }
}
exports.GoalsItemsList = GoalsItemsList;
GoalsItemsList.runtime = protobuf_1.proto3;
GoalsItemsList.typeName = "Genesis.GoalsItemsList";
GoalsItemsList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: GoalItem, repeated: true },
]);
/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Genesis.GoalItemHistoryRequest
 */
class GoalItemHistoryRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the goal ID
         *
         * @generated from field: int64 goal_id = 10;
         */
        this.goalId = protobuf_1.protoInt64.zero;
        /**
         * Stores the name of the item
         *
         * @generated from field: string name = 11;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalItemHistoryRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalItemHistoryRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalItemHistoryRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalItemHistoryRequest, a, b);
    }
}
exports.GoalItemHistoryRequest = GoalItemHistoryRequest;
GoalItemHistoryRequest.runtime = protobuf_1.proto3;
GoalItemHistoryRequest.typeName = "Genesis.GoalItemHistoryRequest";
GoalItemHistoryRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 10, name: "goal_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Genesis.GoalsServicePaginationReq
 */
class GoalsServicePaginationReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: Genesis.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: Genesis.GOAL_SORT_KEY sort_key = 5;
         */
        this.sortKey = GOAL_SORT_KEY.GOAL_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The status of this goal
         *
         * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 6;
         */
        this.status = base_pb_js_1.STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsServicePaginationReq, a, b);
    }
}
exports.GoalsServicePaginationReq = GoalsServicePaginationReq;
GoalsServicePaginationReq.runtime = protobuf_1.proto3;
GoalsServicePaginationReq.typeName = "Genesis.GoalsServicePaginationReq";
GoalsServicePaginationReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(GOAL_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.STANDARD_LIFECYCLE_STATUS) },
]);
/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Genesis.GoalsServicePaginationResponse
 */
class GoalsServicePaginationResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of records in this payload
         *
         * @generated from field: int64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
         *
         * @generated from field: int64 offset = 2;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The total number of records that are available
         *
         * @generated from field: int64 total = 3;
         */
        this.total = protobuf_1.protoInt64.zero;
        /**
         * The list of records
         *
         * @generated from field: repeated Genesis.Goal payload = 4;
         */
        this.payload = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsServicePaginationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsServicePaginationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsServicePaginationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsServicePaginationResponse, a, b);
    }
}
exports.GoalsServicePaginationResponse = GoalsServicePaginationResponse;
GoalsServicePaginationResponse.runtime = protobuf_1.proto3;
GoalsServicePaginationResponse.typeName = "Genesis.GoalsServicePaginationResponse";
GoalsServicePaginationResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "payload", kind: "message", T: Goal, repeated: true },
]);
/**
 *
 * Describes a pagination request to retrieve records associated with an entity UUID
 *
 * @generated from message Genesis.GoalsServiceEntityPaginationReq
 */
class GoalsServiceEntityPaginationReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: Genesis.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: Genesis.GOAL_SORT_KEY sort_key = 5;
         */
        this.sortKey = GOAL_SORT_KEY.GOAL_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The entity UUID that is to be used to filter records
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsServiceEntityPaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsServiceEntityPaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsServiceEntityPaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsServiceEntityPaginationReq, a, b);
    }
}
exports.GoalsServiceEntityPaginationReq = GoalsServiceEntityPaginationReq;
GoalsServiceEntityPaginationReq.runtime = protobuf_1.proto3;
GoalsServiceEntityPaginationReq.typeName = "Genesis.GoalsServiceEntityPaginationReq";
GoalsServiceEntityPaginationReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(GOAL_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Genesis.GoalsServiceFilterReq
 */
class GoalsServiceFilterReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: Genesis.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: Genesis.GOAL_SORT_KEY sort_key = 5;
         */
        this.sortKey = GOAL_SORT_KEY.GOAL_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The minimum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_start = 6;
         */
        this.creationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_end = 7;
         */
        this.creationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * The entity UUID that is to be used to filter records
         *
         * @generated from field: string entity_uuid = 8;
         */
        this.entityUuid = "";
        /**
         * The status of this goal
         *
         * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
         */
        this.status = base_pb_js_1.STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;
        /**
         * The start range of approved timestamp
         *
         * @generated from field: int64 approved_on_start = 11;
         */
        this.approvedOnStart = protobuf_1.protoInt64.zero;
        /**
         * The end range of approved timestamp
         *
         * @generated from field: int64 approved_on_end = 12;
         */
        this.approvedOnEnd = protobuf_1.protoInt64.zero;
        /**
         * The ID of the approver
         *
         * @generated from field: int64 approved_by_user_id = 13;
         */
        this.approvedByUserId = protobuf_1.protoInt64.zero;
        /**
         * The role ID of the approver
         *
         * @generated from field: int64 approver_role_id = 14;
         */
        this.approverRoleId = protobuf_1.protoInt64.zero;
        /**
         * The start range of completed timestamp
         *
         * @generated from field: int64 completed_on_start = 15;
         */
        this.completedOnStart = protobuf_1.protoInt64.zero;
        /**
         * The end range of completed timestamp
         *
         * @generated from field: int64 completed_on_end = 16;
         */
        this.completedOnEnd = protobuf_1.protoInt64.zero;
        /**
         * The reference ID of the goal
         *
         * @generated from field: string reference_id = 20;
         */
        this.referenceId = "";
        /**
         * The unique reference number that has been automatically generated
         *
         * @generated from field: string final_ref_number = 21;
         */
        this.finalRefNumber = "";
        /**
         * The associated user ID
         *
         * @generated from field: int64 user_id = 22;
         */
        this.userId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsServiceFilterReq, a, b);
    }
}
exports.GoalsServiceFilterReq = GoalsServiceFilterReq;
GoalsServiceFilterReq.runtime = protobuf_1.proto3;
GoalsServiceFilterReq.typeName = "Genesis.GoalsServiceFilterReq";
GoalsServiceFilterReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(GOAL_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Genesis.GoalsServiceSearchAllReq
 */
class GoalsServiceSearchAllReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: Genesis.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: Genesis.GOAL_SORT_KEY sort_key = 5;
         */
        this.sortKey = GOAL_SORT_KEY.GOAL_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The entity UUID that is to be used to filter records
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        /**
         * Limit the search space to the given status
         *
         * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
         */
        this.status = base_pb_js_1.STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;
        /**
         * Describes the key with which the search operation needs to be performed
         *
         * @generated from field: string search_key = 11;
         */
        this.searchKey = "";
        /**
         * The associated user ID
         *
         * @generated from field: int64 user_id = 22;
         */
        this.userId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GoalsServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GoalsServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GoalsServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GoalsServiceSearchAllReq, a, b);
    }
}
exports.GoalsServiceSearchAllReq = GoalsServiceSearchAllReq;
GoalsServiceSearchAllReq.runtime = protobuf_1.proto3;
GoalsServiceSearchAllReq.typeName = "Genesis.GoalsServiceSearchAllReq";
GoalsServiceSearchAllReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(GOAL_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
