"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file forms.proto (package Genesis, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormFieldDatumHistoryRequest = exports.FormFieldDatumList = exports.FormFieldDatumCreateRequest = exports.FormFieldDatum = exports.FormField = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 *
 * Describes the parameters that are part of each form field
 *
 * @generated from message Genesis.FormField
 */
class FormField extends protobuf_1.Message {
    /**
     * The ID of the form field
     *
     * @generated from field: int64 id = 1;
     */
    id = protobuf_1.protoInt64.zero;
    /**
     * The ID of the section that this field belongs to
     *
     * @generated from field: int64 section_id = 2;
     */
    sectionId = protobuf_1.protoInt64.zero;
    /**
     * The type of the field
     *
     * @generated from field: string type = 3;
     */
    type = "";
    /**
     * The name of the field
     *
     * @generated from field: string name = 4;
     */
    name = "";
    /**
     * The width of the field
     *
     * @generated from field: string width = 5;
     */
    width = "";
    /**
     * The name of the element
     *
     * @generated from field: string element = 6;
     */
    element = "";
    /**
     * The placeholder that needs to be displayed when the field is empty
     *
     * @generated from field: string placeholder = 7;
     */
    placeholder = "";
    /**
     * The regular expression that is used to validate this field before submission
     *
     * @generated from field: string regex = 8;
     */
    regex = "";
    /**
     * The predefined list of values that can be chosen from
     *
     * @generated from field: repeated string defined_values = 9;
     */
    definedValues = [];
    /**
     * Denotes if this field is printable (will be deprecated)
     *
     * @generated from field: bool printable = 10;
     */
    printable = false;
    /**
     * Denotes if this field is highlighted on the UI (will be deprecated)
     *
     * @generated from field: bool highlightable = 11;
     */
    highlightable = false;
    /**
     * Denotes if this field is active
     *
     * @generated from field: bool active = 12;
     */
    active = false;
    /**
     * Denotes the timestamp of creation
     *
     * @generated from field: int64 timestamp = 13;
     */
    timestamp = protobuf_1.protoInt64.zero;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "Genesis.FormField";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "section_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "width", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "element", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "placeholder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 8, name: "regex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 9, name: "defined_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 10, name: "printable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 11, name: "highlightable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 12, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 13, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fromBinary(bytes, options) {
        return new FormField().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormField().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormField().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormField, a, b);
    }
}
exports.FormField = FormField;
/**
 *
 * Describes the data stored in an individual form field data row of each dynamic form
 *
 * @generated from message Genesis.FormFieldDatum
 */
class FormFieldDatum extends protobuf_1.Message {
    /**
     * The ID of the record
     *
     * @generated from field: int64 id = 1;
     */
    id = protobuf_1.protoInt64.zero;
    /**
     * The underlying form field
     *
     * @generated from field: Genesis.FormField form_field = 2;
     */
    formField;
    /**
     * The UUID that this field belongs to
     *
     * @generated from field: string ref_uuid = 3;
     */
    refUuid = "";
    /**
     * The username of the person who added this record
     *
     * @generated from field: string added_by = 4;
     */
    addedBy = "";
    /**
     * The value entered by the user
     *
     * @generated from field: string value = 5;
     */
    value = "";
    /**
     * The list of values that have been selected by the user (in case of a checkbox or a dropdown)
     *
     * @generated from field: repeated string selected_values = 6;
     */
    selectedValues = [];
    /**
     * Denotes if this field requires approval by a competent authority
     *
     * @generated from field: bool need_approval = 7;
     */
    needApproval = false;
    /**
     * Denotes if this field is active
     *
     * @generated from field: bool active = 8;
     */
    active = false;
    /**
     * Denotes the timestamp of creation
     *
     * @generated from field: int64 timestamp = 9;
     */
    timestamp = protobuf_1.protoInt64.zero;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "Genesis.FormFieldDatum";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "form_field", kind: "message", T: FormField },
        { no: 3, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "added_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "selected_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 7, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 8, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 9, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fromBinary(bytes, options) {
        return new FormFieldDatum().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormFieldDatum().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormFieldDatum().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormFieldDatum, a, b);
    }
}
exports.FormFieldDatum = FormFieldDatum;
/**
 *
 * Describes the data required for creating a dynamic form field entry
 *
 * @generated from message Genesis.FormFieldDatumCreateRequest
 */
class FormFieldDatumCreateRequest extends protobuf_1.Message {
    /**
     * The ID of the corresponding form field
     *
     * @generated from field: int64 form_field_id = 1;
     */
    formFieldId = protobuf_1.protoInt64.zero;
    /**
     * The value to be stored (for textarea and input)
     *
     * @generated from field: string value = 2;
     */
    value = "";
    /**
     * The list of selected values (for radio, checkbox, and select)
     *
     * @generated from field: repeated string selected_values = 3;
     */
    selectedValues = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "Genesis.FormFieldDatumCreateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "form_field_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "selected_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new FormFieldDatumCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormFieldDatumCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormFieldDatumCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormFieldDatumCreateRequest, a, b);
    }
}
exports.FormFieldDatumCreateRequest = FormFieldDatumCreateRequest;
/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Genesis.FormFieldDatumList
 */
class FormFieldDatumList extends protobuf_1.Message {
    /**
     * List of records
     *
     * @generated from field: repeated Genesis.FormFieldDatum list = 1;
     */
    list = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "Genesis.FormFieldDatumList";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "list", kind: "message", T: FormFieldDatum, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new FormFieldDatumList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormFieldDatumList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormFieldDatumList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormFieldDatumList, a, b);
    }
}
exports.FormFieldDatumList = FormFieldDatumList;
/**
 *
 * Describes the data required to fetch history of the given form field and the specified resource
 *
 * @generated from message Genesis.FormFieldDatumHistoryRequest
 */
class FormFieldDatumHistoryRequest extends protobuf_1.Message {
    /**
     * The ID of the corresponding form field
     *
     * @generated from field: int64 form_field_id = 1;
     */
    formFieldId = protobuf_1.protoInt64.zero;
    /**
     * The UUID of the corresponding resource
     *
     * @generated from field: string ref_uuid = 2;
     */
    refUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "Genesis.FormFieldDatumHistoryRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "form_field_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new FormFieldDatumHistoryRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormFieldDatumHistoryRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormFieldDatumHistoryRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormFieldDatumHistoryRequest, a, b);
    }
}
exports.FormFieldDatumHistoryRequest = FormFieldDatumHistoryRequest;
