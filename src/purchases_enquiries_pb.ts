// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file purchases_enquiries.proto (package Genesis, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_pb.js";
import { ApprovalMetadata, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Genesis.PURCHASE_ENQUIRY_SORT_KEY
 */
export enum PURCHASE_ENQUIRY_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  PURCHASE_ENQUIRY_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_CREATED_AT = 1;
   */
  PURCHASE_ENQUIRY_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_MODIFIED_AT = 2;
   */
  PURCHASE_ENQUIRY_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_APPROVED_ON = 3;
   */
  PURCHASE_ENQUIRY_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_APPROVED_BY = 4;
   */
  PURCHASE_ENQUIRY_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  PURCHASE_ENQUIRY_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_COMPLETED_ON = 6;
   */
  PURCHASE_ENQUIRY_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_REFERENCE_ID = 10;
   */
  PURCHASE_ENQUIRY_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  PURCHASE_ENQUIRY_SORT_KEY_FINAL_REF_NUMBER = 11,

  /**
   * Fetch ordered results by the priority
   *
   * @generated from enum value: PURCHASE_ENQUIRY_SORT_KEY_PRIORITY = 14;
   */
  PURCHASE_ENQUIRY_SORT_KEY_PRIORITY = 14,
}
// Retrieve enum metadata with: proto3.getEnumType(PURCHASE_ENQUIRY_SORT_KEY)
proto3.util.setEnumType(PURCHASE_ENQUIRY_SORT_KEY, "Genesis.PURCHASE_ENQUIRY_SORT_KEY", [
  { no: 0, name: "PURCHASE_ENQUIRY_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "PURCHASE_ENQUIRY_SORT_KEY_CREATED_AT" },
  { no: 2, name: "PURCHASE_ENQUIRY_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "PURCHASE_ENQUIRY_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "PURCHASE_ENQUIRY_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "PURCHASE_ENQUIRY_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "PURCHASE_ENQUIRY_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "PURCHASE_ENQUIRY_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "PURCHASE_ENQUIRY_SORT_KEY_FINAL_REF_NUMBER" },
  { no: 14, name: "PURCHASE_ENQUIRY_SORT_KEY_PRIORITY" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Genesis.PurchasesEnquiriesServiceCreateRequest
 */
export class PurchasesEnquiriesServiceCreateRequest extends Message<PurchasesEnquiriesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the purchase enquiry
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The priority of the purchase enquiry. Possible values are "low", "medium", "high".
   *
   * @generated from field: string priority = 14;
   */
  priority = "";

  /**
   * The description of the purchase enquiry
   *
   * @generated from field: string description = 16;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<PurchasesEnquiriesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "priority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesServiceCreateRequest {
    return new PurchasesEnquiriesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceCreateRequest {
    return new PurchasesEnquiriesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceCreateRequest {
    return new PurchasesEnquiriesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesServiceCreateRequest | PlainMessage<PurchasesEnquiriesServiceCreateRequest> | undefined, b: PurchasesEnquiriesServiceCreateRequest | PlainMessage<PurchasesEnquiriesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Genesis.PurchasesEnquiriesServiceUpdateRequest
 */
export class PurchasesEnquiriesServiceUpdateRequest extends Message<PurchasesEnquiriesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the purchase enquiry
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The priority of the purchase enquiry. Possible values are "low", "medium", "high".
   *
   * @generated from field: string priority = 14;
   */
  priority = "";

  /**
   * The description of the purchase enquiry
   *
   * @generated from field: string description = 16;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<PurchasesEnquiriesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "priority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesServiceUpdateRequest {
    return new PurchasesEnquiriesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceUpdateRequest {
    return new PurchasesEnquiriesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceUpdateRequest {
    return new PurchasesEnquiriesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesServiceUpdateRequest | PlainMessage<PurchasesEnquiriesServiceUpdateRequest> | undefined, b: PurchasesEnquiriesServiceUpdateRequest | PlainMessage<PurchasesEnquiriesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Genesis.PurchaseEnquiry
 */
export class PurchaseEnquiry extends Message<PurchaseEnquiry> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this purchase enquiry
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Genesis.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this purchase enquiry
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this purchase enquiry
   *
   * @generated from field: repeated Genesis.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this purchase enquiry was marked as completed
   *
   * @generated from field: int64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the purchase enquiry
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The priority of the purchase enquiry. Possible values are "low", "medium", "high".
   *
   * @generated from field: string priority = 14;
   */
  priority = "";

  /**
   * The description of the purchase enquiry
   *
   * @generated from field: string description = 16;
   */
  description = "";

  /**
   * The list of associated purchase enquiry items
   *
   * @generated from field: repeated Genesis.PurchaseEnquiryItem list = 20;
   */
  list: PurchaseEnquiryItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatum form_data = 30;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<PurchaseEnquiry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchaseEnquiry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "priority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "list", kind: "message", T: PurchaseEnquiryItem, repeated: true },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchaseEnquiry {
    return new PurchaseEnquiry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchaseEnquiry {
    return new PurchaseEnquiry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchaseEnquiry {
    return new PurchaseEnquiry().fromJsonString(jsonString, options);
  }

  static equals(a: PurchaseEnquiry | PlainMessage<PurchaseEnquiry> | undefined, b: PurchaseEnquiry | PlainMessage<PurchaseEnquiry> | undefined): boolean {
    return proto3.util.equals(PurchaseEnquiry, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an item to a purchase enquiry
 *
 * @generated from message Genesis.PurchasesEnquiriesServiceItemCreateRequest
 */
export class PurchasesEnquiriesServiceItemCreateRequest extends Message<PurchasesEnquiriesServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the purchase enquiry ID
   *
   * @generated from field: int64 purchase_enquiry_id = 10;
   */
  purchaseEnquiryId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * The quantity required (in cents)
   *
   * @generated from field: int64 quantity = 12;
   */
  quantity = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: int64 uom_id = 13;
   */
  uomId = protoInt64.zero;

  /**
   * The required by date
   *
   * @generated from field: string required_by = 18;
   */
  requiredBy = "";

  /**
   * The description of the item
   *
   * @generated from field: string description = 19;
   */
  description = "";

  constructor(data?: PartialMessage<PurchasesEnquiriesServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "purchase_enquiry_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "required_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesServiceItemCreateRequest {
    return new PurchasesEnquiriesServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceItemCreateRequest {
    return new PurchasesEnquiriesServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceItemCreateRequest {
    return new PurchasesEnquiriesServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesServiceItemCreateRequest | PlainMessage<PurchasesEnquiriesServiceItemCreateRequest> | undefined, b: PurchasesEnquiriesServiceItemCreateRequest | PlainMessage<PurchasesEnquiriesServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an item in a purchase enquiry
 *
 * @generated from message Genesis.PurchasesEnquiriesServiceItemUpdateRequest
 */
export class PurchasesEnquiriesServiceItemUpdateRequest extends Message<PurchasesEnquiriesServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * The quantity required (in cents)
   *
   * @generated from field: int64 quantity = 12;
   */
  quantity = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: int64 uom_id = 13;
   */
  uomId = protoInt64.zero;

  /**
   * The required by date
   *
   * @generated from field: string required_by = 18;
   */
  requiredBy = "";

  /**
   * The description of the item
   *
   * @generated from field: string description = 19;
   */
  description = "";

  constructor(data?: PartialMessage<PurchasesEnquiriesServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "required_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesServiceItemUpdateRequest {
    return new PurchasesEnquiriesServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceItemUpdateRequest {
    return new PurchasesEnquiriesServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceItemUpdateRequest {
    return new PurchasesEnquiriesServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesServiceItemUpdateRequest | PlainMessage<PurchasesEnquiriesServiceItemUpdateRequest> | undefined, b: PurchasesEnquiriesServiceItemUpdateRequest | PlainMessage<PurchasesEnquiriesServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an item associated to a purchase enquiry
 *
 * @generated from message Genesis.PurchaseEnquiryItem
 */
export class PurchaseEnquiryItem extends Message<PurchaseEnquiryItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this purchase enquiry
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Genesis.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the purchase enquiry ID
   *
   * @generated from field: int64 purchase_enquiry_id = 10;
   */
  purchaseEnquiryId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * The quantity required (in cents)
   *
   * @generated from field: int64 quantity = 12;
   */
  quantity = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: int64 uom_id = 13;
   */
  uomId = protoInt64.zero;

  /**
   * The required by date
   *
   * @generated from field: string required_by = 18;
   */
  requiredBy = "";

  /**
   * The description of the item
   *
   * @generated from field: string description = 19;
   */
  description = "";

  constructor(data?: PartialMessage<PurchaseEnquiryItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchaseEnquiryItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "purchase_enquiry_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "required_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchaseEnquiryItem {
    return new PurchaseEnquiryItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchaseEnquiryItem {
    return new PurchaseEnquiryItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchaseEnquiryItem {
    return new PurchaseEnquiryItem().fromJsonString(jsonString, options);
  }

  static equals(a: PurchaseEnquiryItem | PlainMessage<PurchaseEnquiryItem> | undefined, b: PurchaseEnquiryItem | PlainMessage<PurchaseEnquiryItem> | undefined): boolean {
    return proto3.util.equals(PurchaseEnquiryItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of purchases enquiries
 *
 * @generated from message Genesis.PurchasesEnquiriesList
 */
export class PurchasesEnquiriesList extends Message<PurchasesEnquiriesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Genesis.PurchaseEnquiry list = 1;
   */
  list: PurchaseEnquiry[] = [];

  constructor(data?: PartialMessage<PurchasesEnquiriesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: PurchaseEnquiry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesList {
    return new PurchasesEnquiriesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesList {
    return new PurchasesEnquiriesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesList {
    return new PurchasesEnquiriesList().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesList | PlainMessage<PurchasesEnquiriesList> | undefined, b: PurchasesEnquiriesList | PlainMessage<PurchasesEnquiriesList> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of purchase enquiry items
 *
 * @generated from message Genesis.PurchasesEnquiriesItemsList
 */
export class PurchasesEnquiriesItemsList extends Message<PurchasesEnquiriesItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Genesis.PurchaseEnquiryItem list = 1;
   */
  list: PurchaseEnquiryItem[] = [];

  constructor(data?: PartialMessage<PurchasesEnquiriesItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: PurchaseEnquiryItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesItemsList {
    return new PurchasesEnquiriesItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesItemsList {
    return new PurchasesEnquiriesItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesItemsList {
    return new PurchasesEnquiriesItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesItemsList | PlainMessage<PurchasesEnquiriesItemsList> | undefined, b: PurchasesEnquiriesItemsList | PlainMessage<PurchasesEnquiriesItemsList> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Genesis.PurchaseEnquiryItemHistoryRequest
 */
export class PurchaseEnquiryItemHistoryRequest extends Message<PurchaseEnquiryItemHistoryRequest> {
  /**
   * Stores the purchase enquiry ID
   *
   * @generated from field: int64 purchase_enquiry_id = 10;
   */
  purchaseEnquiryId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  constructor(data?: PartialMessage<PurchaseEnquiryItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchaseEnquiryItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "purchase_enquiry_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchaseEnquiryItemHistoryRequest {
    return new PurchaseEnquiryItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchaseEnquiryItemHistoryRequest {
    return new PurchaseEnquiryItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchaseEnquiryItemHistoryRequest {
    return new PurchaseEnquiryItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PurchaseEnquiryItemHistoryRequest | PlainMessage<PurchaseEnquiryItemHistoryRequest> | undefined, b: PurchaseEnquiryItemHistoryRequest | PlainMessage<PurchaseEnquiryItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(PurchaseEnquiryItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Genesis.PurchasesEnquiriesServicePaginationReq
 */
export class PurchasesEnquiriesServicePaginationReq extends Message<PurchasesEnquiriesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.PURCHASE_ENQUIRY_SORT_KEY sort_key = 5;
   */
  sortKey = PURCHASE_ENQUIRY_SORT_KEY.PURCHASE_ENQUIRY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this purchase enquiry
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  constructor(data?: PartialMessage<PurchasesEnquiriesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PURCHASE_ENQUIRY_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesServicePaginationReq {
    return new PurchasesEnquiriesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServicePaginationReq {
    return new PurchasesEnquiriesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServicePaginationReq {
    return new PurchasesEnquiriesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesServicePaginationReq | PlainMessage<PurchasesEnquiriesServicePaginationReq> | undefined, b: PurchasesEnquiriesServicePaginationReq | PlainMessage<PurchasesEnquiriesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Genesis.PurchasesEnquiriesServicePaginationResponse
 */
export class PurchasesEnquiriesServicePaginationResponse extends Message<PurchasesEnquiriesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: int64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Genesis.PurchaseEnquiry payload = 4;
   */
  payload: PurchaseEnquiry[] = [];

  constructor(data?: PartialMessage<PurchasesEnquiriesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "payload", kind: "message", T: PurchaseEnquiry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesServicePaginationResponse {
    return new PurchasesEnquiriesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServicePaginationResponse {
    return new PurchasesEnquiriesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServicePaginationResponse {
    return new PurchasesEnquiriesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesServicePaginationResponse | PlainMessage<PurchasesEnquiriesServicePaginationResponse> | undefined, b: PurchasesEnquiriesServicePaginationResponse | PlainMessage<PurchasesEnquiriesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records associated with an entity UUID
 *
 * @generated from message Genesis.PurchasesEnquiriesServiceEntityPaginationReq
 */
export class PurchasesEnquiriesServiceEntityPaginationReq extends Message<PurchasesEnquiriesServiceEntityPaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.PURCHASE_ENQUIRY_SORT_KEY sort_key = 5;
   */
  sortKey = PURCHASE_ENQUIRY_SORT_KEY.PURCHASE_ENQUIRY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<PurchasesEnquiriesServiceEntityPaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesServiceEntityPaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PURCHASE_ENQUIRY_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesServiceEntityPaginationReq {
    return new PurchasesEnquiriesServiceEntityPaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceEntityPaginationReq {
    return new PurchasesEnquiriesServiceEntityPaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceEntityPaginationReq {
    return new PurchasesEnquiriesServiceEntityPaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesServiceEntityPaginationReq | PlainMessage<PurchasesEnquiriesServiceEntityPaginationReq> | undefined, b: PurchasesEnquiriesServiceEntityPaginationReq | PlainMessage<PurchasesEnquiriesServiceEntityPaginationReq> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesServiceEntityPaginationReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Genesis.PurchasesEnquiriesServiceFilterReq
 */
export class PurchasesEnquiriesServiceFilterReq extends Message<PurchasesEnquiriesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.PURCHASE_ENQUIRY_SORT_KEY sort_key = 5;
   */
  sortKey = PURCHASE_ENQUIRY_SORT_KEY.PURCHASE_ENQUIRY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this purchase enquiry
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: int64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: int64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: int64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: int64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: int64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: int64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the purchase enquiry
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The priority of the purchase enquiry. Possible values are "low", "medium", "high".
   *
   * @generated from field: string priority = 24;
   */
  priority = "";

  constructor(data?: PartialMessage<PurchasesEnquiriesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PURCHASE_ENQUIRY_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "priority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesServiceFilterReq {
    return new PurchasesEnquiriesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceFilterReq {
    return new PurchasesEnquiriesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceFilterReq {
    return new PurchasesEnquiriesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesServiceFilterReq | PlainMessage<PurchasesEnquiriesServiceFilterReq> | undefined, b: PurchasesEnquiriesServiceFilterReq | PlainMessage<PurchasesEnquiriesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Genesis.PurchasesEnquiriesServiceSearchAllReq
 */
export class PurchasesEnquiriesServiceSearchAllReq extends Message<PurchasesEnquiriesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.PURCHASE_ENQUIRY_SORT_KEY sort_key = 5;
   */
  sortKey = PURCHASE_ENQUIRY_SORT_KEY.PURCHASE_ENQUIRY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<PurchasesEnquiriesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.PurchasesEnquiriesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PURCHASE_ENQUIRY_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchasesEnquiriesServiceSearchAllReq {
    return new PurchasesEnquiriesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceSearchAllReq {
    return new PurchasesEnquiriesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchasesEnquiriesServiceSearchAllReq {
    return new PurchasesEnquiriesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: PurchasesEnquiriesServiceSearchAllReq | PlainMessage<PurchasesEnquiriesServiceSearchAllReq> | undefined, b: PurchasesEnquiriesServiceSearchAllReq | PlainMessage<PurchasesEnquiriesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(PurchasesEnquiriesServiceSearchAllReq, a, b);
  }
}

