// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file equations_sales_bundles.proto (package Genesis, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ApprovalMetadata, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Genesis.EQUATION_SALES_BUNDLE_SORT_KEY
 */
export enum EQUATION_SALES_BUNDLE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: EQUATION_SALES_BUNDLE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  EQUATION_SALES_BUNDLE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: EQUATION_SALES_BUNDLE_SORT_KEY_CREATED_AT = 1;
   */
  EQUATION_SALES_BUNDLE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: EQUATION_SALES_BUNDLE_SORT_KEY_MODIFIED_AT = 2;
   */
  EQUATION_SALES_BUNDLE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: EQUATION_SALES_BUNDLE_SORT_KEY_APPROVED_ON = 3;
   */
  EQUATION_SALES_BUNDLE_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: EQUATION_SALES_BUNDLE_SORT_KEY_APPROVED_BY = 4;
   */
  EQUATION_SALES_BUNDLE_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: EQUATION_SALES_BUNDLE_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  EQUATION_SALES_BUNDLE_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: EQUATION_SALES_BUNDLE_SORT_KEY_COMPLETED_ON = 6;
   */
  EQUATION_SALES_BUNDLE_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the name
   *
   * @generated from enum value: EQUATION_SALES_BUNDLE_SORT_KEY_NAME = 10;
   */
  EQUATION_SALES_BUNDLE_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by the family ID
   *
   * @generated from enum value: EQUATION_SALES_BUNDLE_SORT_KEY_FAMILY_ID = 11;
   */
  EQUATION_SALES_BUNDLE_SORT_KEY_FAMILY_ID = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(EQUATION_SALES_BUNDLE_SORT_KEY)
proto3.util.setEnumType(EQUATION_SALES_BUNDLE_SORT_KEY, "Genesis.EQUATION_SALES_BUNDLE_SORT_KEY", [
  { no: 0, name: "EQUATION_SALES_BUNDLE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "EQUATION_SALES_BUNDLE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "EQUATION_SALES_BUNDLE_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "EQUATION_SALES_BUNDLE_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "EQUATION_SALES_BUNDLE_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "EQUATION_SALES_BUNDLE_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "EQUATION_SALES_BUNDLE_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "EQUATION_SALES_BUNDLE_SORT_KEY_NAME" },
  { no: 11, name: "EQUATION_SALES_BUNDLE_SORT_KEY_FAMILY_ID" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Genesis.EquationsSalesBundlesServiceCreateRequest
 */
export class EquationsSalesBundlesServiceCreateRequest extends Message<EquationsSalesBundlesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The name of the equation sales bundle
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The ID of the family that this equation belongs to
   *
   * @generated from field: int64 family_id = 12;
   */
  familyId = protoInt64.zero;

  /**
   * The description of the equation sales bundle
   *
   * @generated from field: string description = 13;
   */
  description = "";

  constructor(data?: PartialMessage<EquationsSalesBundlesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesServiceCreateRequest {
    return new EquationsSalesBundlesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceCreateRequest {
    return new EquationsSalesBundlesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceCreateRequest {
    return new EquationsSalesBundlesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesServiceCreateRequest | PlainMessage<EquationsSalesBundlesServiceCreateRequest> | undefined, b: EquationsSalesBundlesServiceCreateRequest | PlainMessage<EquationsSalesBundlesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Genesis.EquationsSalesBundlesServiceUpdateRequest
 */
export class EquationsSalesBundlesServiceUpdateRequest extends Message<EquationsSalesBundlesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The name of the equation sales bundle
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The description of the equation sales bundle
   *
   * @generated from field: string description = 13;
   */
  description = "";

  constructor(data?: PartialMessage<EquationsSalesBundlesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesServiceUpdateRequest {
    return new EquationsSalesBundlesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceUpdateRequest {
    return new EquationsSalesBundlesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceUpdateRequest {
    return new EquationsSalesBundlesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesServiceUpdateRequest | PlainMessage<EquationsSalesBundlesServiceUpdateRequest> | undefined, b: EquationsSalesBundlesServiceUpdateRequest | PlainMessage<EquationsSalesBundlesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Genesis.EquationSalesBundle
 */
export class EquationSalesBundle extends Message<EquationSalesBundle> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this equation sales bundle
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Genesis.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this equation sales bundle
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this equation sales bundle
   *
   * @generated from field: repeated Genesis.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this equation sales bundle was marked as completed
   *
   * @generated from field: int64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The name of the equation sales bundle
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The ID of the family that this equation belongs to
   *
   * @generated from field: int64 family_id = 12;
   */
  familyId = protoInt64.zero;

  /**
   * The description of the equation sales bundle
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The list of associated equation sales bundle items
   *
   * @generated from field: repeated Genesis.EquationSalesBundleItem list = 20;
   */
  list: EquationSalesBundleItem[] = [];

  /**
   * The total price of the equation sales bundle
   *
   * @generated from field: double total_price = 40;
   */
  totalPrice = 0;

  constructor(data?: PartialMessage<EquationSalesBundle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationSalesBundle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "list", kind: "message", T: EquationSalesBundleItem, repeated: true },
    { no: 40, name: "total_price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationSalesBundle {
    return new EquationSalesBundle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationSalesBundle {
    return new EquationSalesBundle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationSalesBundle {
    return new EquationSalesBundle().fromJsonString(jsonString, options);
  }

  static equals(a: EquationSalesBundle | PlainMessage<EquationSalesBundle> | undefined, b: EquationSalesBundle | PlainMessage<EquationSalesBundle> | undefined): boolean {
    return proto3.util.equals(EquationSalesBundle, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an item to a equation sales bundle
 *
 * @generated from message Genesis.EquationsSalesBundlesServiceItemCreateRequest
 */
export class EquationsSalesBundlesServiceItemCreateRequest extends Message<EquationsSalesBundlesServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the ID of the equation sales bundle
   *
   * @generated from field: int64 equation_id = 10;
   */
  equationId = protoInt64.zero;

  /**
   * The ID of the family that the equation depends upon
   *
   * @generated from field: int64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * The quantity of the associated family to be used as the multiplier
   *
   * @generated from field: int64 quantity = 12;
   */
  quantity = protoInt64.zero;

  /**
   * The optional unit price of this family
   *
   * @generated from field: int64 unit_price = 13;
   */
  unitPrice = protoInt64.zero;

  /**
   * The optional specifications
   *
   * @generated from field: string specifications = 14;
   */
  specifications = "";

  constructor(data?: PartialMessage<EquationsSalesBundlesServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "equation_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "unit_price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesServiceItemCreateRequest {
    return new EquationsSalesBundlesServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceItemCreateRequest {
    return new EquationsSalesBundlesServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceItemCreateRequest {
    return new EquationsSalesBundlesServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesServiceItemCreateRequest | PlainMessage<EquationsSalesBundlesServiceItemCreateRequest> | undefined, b: EquationsSalesBundlesServiceItemCreateRequest | PlainMessage<EquationsSalesBundlesServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an item in a equation sales bundle
 *
 * @generated from message Genesis.EquationsSalesBundlesServiceItemUpdateRequest
 */
export class EquationsSalesBundlesServiceItemUpdateRequest extends Message<EquationsSalesBundlesServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The quantity of the associated family to be used as the multiplier
   *
   * @generated from field: int64 quantity = 12;
   */
  quantity = protoInt64.zero;

  /**
   * The optional unit price of this family
   *
   * @generated from field: int64 unit_price = 13;
   */
  unitPrice = protoInt64.zero;

  /**
   * The optional specifications
   *
   * @generated from field: string specifications = 14;
   */
  specifications = "";

  constructor(data?: PartialMessage<EquationsSalesBundlesServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "unit_price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesServiceItemUpdateRequest {
    return new EquationsSalesBundlesServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceItemUpdateRequest {
    return new EquationsSalesBundlesServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceItemUpdateRequest {
    return new EquationsSalesBundlesServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesServiceItemUpdateRequest | PlainMessage<EquationsSalesBundlesServiceItemUpdateRequest> | undefined, b: EquationsSalesBundlesServiceItemUpdateRequest | PlainMessage<EquationsSalesBundlesServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an item associated to a equation sales bundle
 *
 * @generated from message Genesis.EquationSalesBundleItem
 */
export class EquationSalesBundleItem extends Message<EquationSalesBundleItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this equation sales bundle
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Genesis.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the ID of the equation sales bundle
   *
   * @generated from field: int64 equation_id = 10;
   */
  equationId = protoInt64.zero;

  /**
   * The ID of the family that the equation depends upon
   *
   * @generated from field: int64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * The quantity of the associated family to be used as the multiplier
   *
   * @generated from field: int64 quantity = 12;
   */
  quantity = protoInt64.zero;

  /**
   * The optional unit price of this family
   *
   * @generated from field: int64 unit_price = 13;
   */
  unitPrice = protoInt64.zero;

  /**
   * The optional specifications
   *
   * @generated from field: string specifications = 14;
   */
  specifications = "";

  constructor(data?: PartialMessage<EquationSalesBundleItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationSalesBundleItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "equation_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "unit_price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationSalesBundleItem {
    return new EquationSalesBundleItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationSalesBundleItem {
    return new EquationSalesBundleItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationSalesBundleItem {
    return new EquationSalesBundleItem().fromJsonString(jsonString, options);
  }

  static equals(a: EquationSalesBundleItem | PlainMessage<EquationSalesBundleItem> | undefined, b: EquationSalesBundleItem | PlainMessage<EquationSalesBundleItem> | undefined): boolean {
    return proto3.util.equals(EquationSalesBundleItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of equations sales bundles
 *
 * @generated from message Genesis.EquationsSalesBundlesList
 */
export class EquationsSalesBundlesList extends Message<EquationsSalesBundlesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Genesis.EquationSalesBundle list = 1;
   */
  list: EquationSalesBundle[] = [];

  constructor(data?: PartialMessage<EquationsSalesBundlesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: EquationSalesBundle, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesList {
    return new EquationsSalesBundlesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesList {
    return new EquationsSalesBundlesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesList {
    return new EquationsSalesBundlesList().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesList | PlainMessage<EquationsSalesBundlesList> | undefined, b: EquationsSalesBundlesList | PlainMessage<EquationsSalesBundlesList> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of equation sales bundle items
 *
 * @generated from message Genesis.EquationsSalesBundlesItemsList
 */
export class EquationsSalesBundlesItemsList extends Message<EquationsSalesBundlesItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Genesis.EquationSalesBundleItem list = 1;
   */
  list: EquationSalesBundleItem[] = [];

  constructor(data?: PartialMessage<EquationsSalesBundlesItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: EquationSalesBundleItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesItemsList {
    return new EquationsSalesBundlesItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesItemsList {
    return new EquationsSalesBundlesItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesItemsList {
    return new EquationsSalesBundlesItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesItemsList | PlainMessage<EquationsSalesBundlesItemsList> | undefined, b: EquationsSalesBundlesItemsList | PlainMessage<EquationsSalesBundlesItemsList> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Genesis.EquationSalesBundleItemHistoryRequest
 */
export class EquationSalesBundleItemHistoryRequest extends Message<EquationSalesBundleItemHistoryRequest> {
  /**
   * Stores the ID of the equation sales bundle
   *
   * @generated from field: int64 equation_id = 10;
   */
  equationId = protoInt64.zero;

  /**
   * The ID of the family that the equation depends upon
   *
   * @generated from field: int64 family_id = 11;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<EquationSalesBundleItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationSalesBundleItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "equation_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationSalesBundleItemHistoryRequest {
    return new EquationSalesBundleItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationSalesBundleItemHistoryRequest {
    return new EquationSalesBundleItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationSalesBundleItemHistoryRequest {
    return new EquationSalesBundleItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EquationSalesBundleItemHistoryRequest | PlainMessage<EquationSalesBundleItemHistoryRequest> | undefined, b: EquationSalesBundleItemHistoryRequest | PlainMessage<EquationSalesBundleItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(EquationSalesBundleItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Genesis.EquationsSalesBundlesServicePaginationReq
 */
export class EquationsSalesBundlesServicePaginationReq extends Message<EquationsSalesBundlesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.EQUATION_SALES_BUNDLE_SORT_KEY sort_key = 5;
   */
  sortKey = EQUATION_SALES_BUNDLE_SORT_KEY.EQUATION_SALES_BUNDLE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this equation sales bundle
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  constructor(data?: PartialMessage<EquationsSalesBundlesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(EQUATION_SALES_BUNDLE_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesServicePaginationReq {
    return new EquationsSalesBundlesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServicePaginationReq {
    return new EquationsSalesBundlesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServicePaginationReq {
    return new EquationsSalesBundlesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesServicePaginationReq | PlainMessage<EquationsSalesBundlesServicePaginationReq> | undefined, b: EquationsSalesBundlesServicePaginationReq | PlainMessage<EquationsSalesBundlesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Genesis.EquationsSalesBundlesServicePaginationResponse
 */
export class EquationsSalesBundlesServicePaginationResponse extends Message<EquationsSalesBundlesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: int64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Genesis.EquationSalesBundle payload = 4;
   */
  payload: EquationSalesBundle[] = [];

  constructor(data?: PartialMessage<EquationsSalesBundlesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "payload", kind: "message", T: EquationSalesBundle, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesServicePaginationResponse {
    return new EquationsSalesBundlesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServicePaginationResponse {
    return new EquationsSalesBundlesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServicePaginationResponse {
    return new EquationsSalesBundlesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesServicePaginationResponse | PlainMessage<EquationsSalesBundlesServicePaginationResponse> | undefined, b: EquationsSalesBundlesServicePaginationResponse | PlainMessage<EquationsSalesBundlesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records associated with an entity UUID
 *
 * @generated from message Genesis.EquationsSalesBundlesServiceEntityPaginationReq
 */
export class EquationsSalesBundlesServiceEntityPaginationReq extends Message<EquationsSalesBundlesServiceEntityPaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.EQUATION_SALES_BUNDLE_SORT_KEY sort_key = 5;
   */
  sortKey = EQUATION_SALES_BUNDLE_SORT_KEY.EQUATION_SALES_BUNDLE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<EquationsSalesBundlesServiceEntityPaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesServiceEntityPaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(EQUATION_SALES_BUNDLE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesServiceEntityPaginationReq {
    return new EquationsSalesBundlesServiceEntityPaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceEntityPaginationReq {
    return new EquationsSalesBundlesServiceEntityPaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceEntityPaginationReq {
    return new EquationsSalesBundlesServiceEntityPaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesServiceEntityPaginationReq | PlainMessage<EquationsSalesBundlesServiceEntityPaginationReq> | undefined, b: EquationsSalesBundlesServiceEntityPaginationReq | PlainMessage<EquationsSalesBundlesServiceEntityPaginationReq> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesServiceEntityPaginationReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Genesis.EquationsSalesBundlesServiceFilterReq
 */
export class EquationsSalesBundlesServiceFilterReq extends Message<EquationsSalesBundlesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.EQUATION_SALES_BUNDLE_SORT_KEY sort_key = 5;
   */
  sortKey = EQUATION_SALES_BUNDLE_SORT_KEY.EQUATION_SALES_BUNDLE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this equation sales bundle
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: int64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: int64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: int64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: int64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: int64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: int64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The name of the equation sales bundle
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The ID of the family that this equation belongs to
   *
   * @generated from field: int64 family_id = 21;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<EquationsSalesBundlesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(EQUATION_SALES_BUNDLE_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesServiceFilterReq {
    return new EquationsSalesBundlesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceFilterReq {
    return new EquationsSalesBundlesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceFilterReq {
    return new EquationsSalesBundlesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesServiceFilterReq | PlainMessage<EquationsSalesBundlesServiceFilterReq> | undefined, b: EquationsSalesBundlesServiceFilterReq | PlainMessage<EquationsSalesBundlesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Genesis.EquationsSalesBundlesServiceSearchAllReq
 */
export class EquationsSalesBundlesServiceSearchAllReq extends Message<EquationsSalesBundlesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.EQUATION_SALES_BUNDLE_SORT_KEY sort_key = 5;
   */
  sortKey = EQUATION_SALES_BUNDLE_SORT_KEY.EQUATION_SALES_BUNDLE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<EquationsSalesBundlesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EquationsSalesBundlesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(EQUATION_SALES_BUNDLE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquationsSalesBundlesServiceSearchAllReq {
    return new EquationsSalesBundlesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceSearchAllReq {
    return new EquationsSalesBundlesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquationsSalesBundlesServiceSearchAllReq {
    return new EquationsSalesBundlesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: EquationsSalesBundlesServiceSearchAllReq | PlainMessage<EquationsSalesBundlesServiceSearchAllReq> | undefined, b: EquationsSalesBundlesServiceSearchAllReq | PlainMessage<EquationsSalesBundlesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(EquationsSalesBundlesServiceSearchAllReq, a, b);
  }
}

