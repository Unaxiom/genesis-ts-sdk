// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file overtimes.proto (package Genesis, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_pb.js";
import { ApprovalMetadata, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Genesis.OVERTIME_SORT_KEY
 */
export enum OVERTIME_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: OVERTIME_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  OVERTIME_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: OVERTIME_SORT_KEY_CREATED_AT = 1;
   */
  OVERTIME_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: OVERTIME_SORT_KEY_MODIFIED_AT = 2;
   */
  OVERTIME_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: OVERTIME_SORT_KEY_APPROVED_ON = 3;
   */
  OVERTIME_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: OVERTIME_SORT_KEY_APPROVED_BY = 4;
   */
  OVERTIME_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: OVERTIME_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  OVERTIME_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: OVERTIME_SORT_KEY_COMPLETED_ON = 6;
   */
  OVERTIME_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: OVERTIME_SORT_KEY_REFERENCE_ID = 10;
   */
  OVERTIME_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: OVERTIME_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  OVERTIME_SORT_KEY_FINAL_REF_NUMBER = 11,

  /**
   * Fetch ordered results by the user ID
   *
   * @generated from enum value: OVERTIME_SORT_KEY_USER_ID = 12;
   */
  OVERTIME_SORT_KEY_USER_ID = 12,

  /**
   * Fetch ordered results by the "from timestamp"
   *
   * @generated from enum value: OVERTIME_SORT_KEY_FROM_TIMESTAMP = 13;
   */
  OVERTIME_SORT_KEY_FROM_TIMESTAMP = 13,

  /**
   * Fetch ordered results by the "to timestamp"
   *
   * @generated from enum value: OVERTIME_SORT_KEY_TO_TIMESTAMP = 14;
   */
  OVERTIME_SORT_KEY_TO_TIMESTAMP = 14,
}
// Retrieve enum metadata with: proto3.getEnumType(OVERTIME_SORT_KEY)
proto3.util.setEnumType(OVERTIME_SORT_KEY, "Genesis.OVERTIME_SORT_KEY", [
  { no: 0, name: "OVERTIME_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "OVERTIME_SORT_KEY_CREATED_AT" },
  { no: 2, name: "OVERTIME_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "OVERTIME_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "OVERTIME_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "OVERTIME_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "OVERTIME_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "OVERTIME_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "OVERTIME_SORT_KEY_FINAL_REF_NUMBER" },
  { no: 12, name: "OVERTIME_SORT_KEY_USER_ID" },
  { no: 13, name: "OVERTIME_SORT_KEY_FROM_TIMESTAMP" },
  { no: 14, name: "OVERTIME_SORT_KEY_TO_TIMESTAMP" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Genesis.OvertimesServiceCreateRequest
 */
export class OvertimesServiceCreateRequest extends Message<OvertimesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the overtime
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The ID of the user who has requested for overtime
   *
   * @generated from field: int64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * The UNIX timestamp from when the overtime begins
   *
   * @generated from field: int64 from_timestamp = 12;
   */
  fromTimestamp = protoInt64.zero;

  /**
   * The UNIX timestamp from when the overtime ends
   *
   * @generated from field: int64 to_timestamp = 13;
   */
  toTimestamp = protoInt64.zero;

  /**
   * The description of the overtime
   *
   * @generated from field: string description = 14;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<OvertimesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.OvertimesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "from_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "to_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OvertimesServiceCreateRequest {
    return new OvertimesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OvertimesServiceCreateRequest {
    return new OvertimesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OvertimesServiceCreateRequest {
    return new OvertimesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OvertimesServiceCreateRequest | PlainMessage<OvertimesServiceCreateRequest> | undefined, b: OvertimesServiceCreateRequest | PlainMessage<OvertimesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(OvertimesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Genesis.OvertimesServiceUpdateRequest
 */
export class OvertimesServiceUpdateRequest extends Message<OvertimesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the overtime
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The UNIX timestamp from when the overtime begins
   *
   * @generated from field: int64 from_timestamp = 12;
   */
  fromTimestamp = protoInt64.zero;

  /**
   * The UNIX timestamp from when the overtime ends
   *
   * @generated from field: int64 to_timestamp = 13;
   */
  toTimestamp = protoInt64.zero;

  /**
   * The description of the overtime
   *
   * @generated from field: string description = 14;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<OvertimesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.OvertimesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "from_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "to_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OvertimesServiceUpdateRequest {
    return new OvertimesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OvertimesServiceUpdateRequest {
    return new OvertimesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OvertimesServiceUpdateRequest {
    return new OvertimesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OvertimesServiceUpdateRequest | PlainMessage<OvertimesServiceUpdateRequest> | undefined, b: OvertimesServiceUpdateRequest | PlainMessage<OvertimesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(OvertimesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Genesis.Overtime
 */
export class Overtime extends Message<Overtime> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this overtime
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Genesis.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this overtime
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this overtime
   *
   * @generated from field: repeated Genesis.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this overtime was marked as completed
   *
   * @generated from field: int64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference_id of the overtime
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The ID of the user who has requested for overtime
   *
   * @generated from field: int64 user_id = 12;
   */
  userId = protoInt64.zero;

  /**
   * The UNIX timestamp from when the overtime begins
   *
   * @generated from field: int64 from_timestamp = 13;
   */
  fromTimestamp = protoInt64.zero;

  /**
   * The UNIX timestamp from when the overtime ends
   *
   * @generated from field: int64 to_timestamp = 14;
   */
  toTimestamp = protoInt64.zero;

  /**
   * The description of the overtime
   *
   * @generated from field: string description = 15;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatum form_data = 30;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<Overtime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.Overtime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "from_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "to_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Overtime {
    return new Overtime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Overtime {
    return new Overtime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Overtime {
    return new Overtime().fromJsonString(jsonString, options);
  }

  static equals(a: Overtime | PlainMessage<Overtime> | undefined, b: Overtime | PlainMessage<Overtime> | undefined): boolean {
    return proto3.util.equals(Overtime, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Genesis.OvertimesList
 */
export class OvertimesList extends Message<OvertimesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Genesis.Overtime list = 1;
   */
  list: Overtime[] = [];

  constructor(data?: PartialMessage<OvertimesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.OvertimesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Overtime, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OvertimesList {
    return new OvertimesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OvertimesList {
    return new OvertimesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OvertimesList {
    return new OvertimesList().fromJsonString(jsonString, options);
  }

  static equals(a: OvertimesList | PlainMessage<OvertimesList> | undefined, b: OvertimesList | PlainMessage<OvertimesList> | undefined): boolean {
    return proto3.util.equals(OvertimesList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Genesis.OvertimesServicePaginationReq
 */
export class OvertimesServicePaginationReq extends Message<OvertimesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.OVERTIME_SORT_KEY sort_key = 5;
   */
  sortKey = OVERTIME_SORT_KEY.OVERTIME_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this overtime
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  constructor(data?: PartialMessage<OvertimesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.OvertimesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(OVERTIME_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OvertimesServicePaginationReq {
    return new OvertimesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OvertimesServicePaginationReq {
    return new OvertimesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OvertimesServicePaginationReq {
    return new OvertimesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: OvertimesServicePaginationReq | PlainMessage<OvertimesServicePaginationReq> | undefined, b: OvertimesServicePaginationReq | PlainMessage<OvertimesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(OvertimesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Genesis.OvertimesServicePaginationResponse
 */
export class OvertimesServicePaginationResponse extends Message<OvertimesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: int64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Genesis.Overtime payload = 4;
   */
  payload: Overtime[] = [];

  constructor(data?: PartialMessage<OvertimesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.OvertimesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "payload", kind: "message", T: Overtime, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OvertimesServicePaginationResponse {
    return new OvertimesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OvertimesServicePaginationResponse {
    return new OvertimesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OvertimesServicePaginationResponse {
    return new OvertimesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OvertimesServicePaginationResponse | PlainMessage<OvertimesServicePaginationResponse> | undefined, b: OvertimesServicePaginationResponse | PlainMessage<OvertimesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(OvertimesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records associated with an entity UUID
 *
 * @generated from message Genesis.OvertimesServiceEntityPaginationReq
 */
export class OvertimesServiceEntityPaginationReq extends Message<OvertimesServiceEntityPaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.OVERTIME_SORT_KEY sort_key = 5;
   */
  sortKey = OVERTIME_SORT_KEY.OVERTIME_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<OvertimesServiceEntityPaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.OvertimesServiceEntityPaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(OVERTIME_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OvertimesServiceEntityPaginationReq {
    return new OvertimesServiceEntityPaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OvertimesServiceEntityPaginationReq {
    return new OvertimesServiceEntityPaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OvertimesServiceEntityPaginationReq {
    return new OvertimesServiceEntityPaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: OvertimesServiceEntityPaginationReq | PlainMessage<OvertimesServiceEntityPaginationReq> | undefined, b: OvertimesServiceEntityPaginationReq | PlainMessage<OvertimesServiceEntityPaginationReq> | undefined): boolean {
    return proto3.util.equals(OvertimesServiceEntityPaginationReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Genesis.OvertimesServiceFilterReq
 */
export class OvertimesServiceFilterReq extends Message<OvertimesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.OVERTIME_SORT_KEY sort_key = 5;
   */
  sortKey = OVERTIME_SORT_KEY.OVERTIME_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this overtime
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: int64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: int64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: int64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: int64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: int64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: int64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference_id of the overtime
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The ID of the user who has requested for overtime
   *
   * @generated from field: int64 user_id = 22;
   */
  userId = protoInt64.zero;

  /**
   * The start range of "from timestamp"
   *
   * @generated from field: int64 from_timestamp_start = 24;
   */
  fromTimestampStart = protoInt64.zero;

  /**
   * The end range of "from timestamp"
   *
   * @generated from field: int64 from_timestamp_end = 25;
   */
  fromTimestampEnd = protoInt64.zero;

  /**
   * The start range of "to timestamp"
   *
   * @generated from field: int64 to_timestamp_start = 26;
   */
  toTimestampStart = protoInt64.zero;

  /**
   * The end range of "to timestamp"
   *
   * @generated from field: int64 to_timestamp_end = 27;
   */
  toTimestampEnd = protoInt64.zero;

  constructor(data?: PartialMessage<OvertimesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.OvertimesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(OVERTIME_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "from_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "from_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 26, name: "to_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 27, name: "to_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OvertimesServiceFilterReq {
    return new OvertimesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OvertimesServiceFilterReq {
    return new OvertimesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OvertimesServiceFilterReq {
    return new OvertimesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: OvertimesServiceFilterReq | PlainMessage<OvertimesServiceFilterReq> | undefined, b: OvertimesServiceFilterReq | PlainMessage<OvertimesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(OvertimesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Genesis.OvertimesServiceSearchAllReq
 */
export class OvertimesServiceSearchAllReq extends Message<OvertimesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.OVERTIME_SORT_KEY sort_key = 5;
   */
  sortKey = OVERTIME_SORT_KEY.OVERTIME_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The ID of the user who has requested for overtime
   *
   * @generated from field: int64 user_id = 22;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<OvertimesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.OvertimesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(OVERTIME_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OvertimesServiceSearchAllReq {
    return new OvertimesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OvertimesServiceSearchAllReq {
    return new OvertimesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OvertimesServiceSearchAllReq {
    return new OvertimesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: OvertimesServiceSearchAllReq | PlainMessage<OvertimesServiceSearchAllReq> | undefined, b: OvertimesServiceSearchAllReq | PlainMessage<OvertimesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(OvertimesServiceSearchAllReq, a, b);
  }
}

