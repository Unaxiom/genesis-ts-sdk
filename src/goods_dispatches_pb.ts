// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file goods_dispatches.proto (package Genesis, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_pb.js";
import { ApprovalMetadata, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Genesis.GOODS_DISPATCH_SORT_KEY
 */
export enum GOODS_DISPATCH_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: GOODS_DISPATCH_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  GOODS_DISPATCH_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: GOODS_DISPATCH_SORT_KEY_CREATED_AT = 1;
   */
  GOODS_DISPATCH_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: GOODS_DISPATCH_SORT_KEY_MODIFIED_AT = 2;
   */
  GOODS_DISPATCH_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: GOODS_DISPATCH_SORT_KEY_APPROVED_ON = 3;
   */
  GOODS_DISPATCH_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: GOODS_DISPATCH_SORT_KEY_APPROVED_BY = 4;
   */
  GOODS_DISPATCH_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: GOODS_DISPATCH_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  GOODS_DISPATCH_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: GOODS_DISPATCH_SORT_KEY_COMPLETED_ON = 6;
   */
  GOODS_DISPATCH_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: GOODS_DISPATCH_SORT_KEY_REFERENCE_ID = 10;
   */
  GOODS_DISPATCH_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: GOODS_DISPATCH_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  GOODS_DISPATCH_SORT_KEY_FINAL_REF_NUMBER = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(GOODS_DISPATCH_SORT_KEY)
proto3.util.setEnumType(GOODS_DISPATCH_SORT_KEY, "Genesis.GOODS_DISPATCH_SORT_KEY", [
  { no: 0, name: "GOODS_DISPATCH_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "GOODS_DISPATCH_SORT_KEY_CREATED_AT" },
  { no: 2, name: "GOODS_DISPATCH_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "GOODS_DISPATCH_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "GOODS_DISPATCH_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "GOODS_DISPATCH_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "GOODS_DISPATCH_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "GOODS_DISPATCH_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "GOODS_DISPATCH_SORT_KEY_FINAL_REF_NUMBER" },
]);

/**
 *
 * Describes the available billing statuses
 *
 * @generated from enum Genesis.GOODS_DISPATCH_BILLING_STATUS
 */
export enum GOODS_DISPATCH_BILLING_STATUS {
  /**
   * Any billing status
   *
   * @generated from enum value: GOODS_DISPATCH_BILLING_STATUS_ANY_UNSPECIFIED = 0;
   */
  GOODS_DISPATCH_BILLING_STATUS_ANY_UNSPECIFIED = 0,

  /**
   * Goods dispatch is billed
   *
   * @generated from enum value: GOODS_DISPATCH_BILLING_STATUS_BILLED = 1;
   */
  GOODS_DISPATCH_BILLING_STATUS_BILLED = 1,

  /**
   * Goods dispatch is unbilled
   *
   * @generated from enum value: GOODS_DISPATCH_BILLING_STATUS_UNBILLED = 2;
   */
  GOODS_DISPATCH_BILLING_STATUS_UNBILLED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GOODS_DISPATCH_BILLING_STATUS)
proto3.util.setEnumType(GOODS_DISPATCH_BILLING_STATUS, "Genesis.GOODS_DISPATCH_BILLING_STATUS", [
  { no: 0, name: "GOODS_DISPATCH_BILLING_STATUS_ANY_UNSPECIFIED" },
  { no: 1, name: "GOODS_DISPATCH_BILLING_STATUS_BILLED" },
  { no: 2, name: "GOODS_DISPATCH_BILLING_STATUS_UNBILLED" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Genesis.GoodsDispatchesServiceCreateRequest
 */
export class GoodsDispatchesServiceCreateRequest extends Message<GoodsDispatchesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the goods dispatch
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<GoodsDispatchesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServiceCreateRequest {
    return new GoodsDispatchesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceCreateRequest {
    return new GoodsDispatchesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceCreateRequest {
    return new GoodsDispatchesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServiceCreateRequest | PlainMessage<GoodsDispatchesServiceCreateRequest> | undefined, b: GoodsDispatchesServiceCreateRequest | PlainMessage<GoodsDispatchesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Genesis.GoodsDispatchesServiceUpdateRequest
 */
export class GoodsDispatchesServiceUpdateRequest extends Message<GoodsDispatchesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the goods dispatch
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<GoodsDispatchesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServiceUpdateRequest {
    return new GoodsDispatchesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceUpdateRequest {
    return new GoodsDispatchesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceUpdateRequest {
    return new GoodsDispatchesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServiceUpdateRequest | PlainMessage<GoodsDispatchesServiceUpdateRequest> | undefined, b: GoodsDispatchesServiceUpdateRequest | PlainMessage<GoodsDispatchesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to perform an autofill request
 *
 * @generated from message Genesis.GoodsDispatchesServiceAutofillRequest
 */
export class GoodsDispatchesServiceAutofillRequest extends Message<GoodsDispatchesServiceAutofillRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Stores if the inventory needs to be split into unit quantities
   *
   * @generated from field: bool split_into_unit_quantity = 10;
   */
  splitIntoUnitQuantity = false;

  constructor(data?: PartialMessage<GoodsDispatchesServiceAutofillRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServiceAutofillRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "split_into_unit_quantity", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServiceAutofillRequest {
    return new GoodsDispatchesServiceAutofillRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceAutofillRequest {
    return new GoodsDispatchesServiceAutofillRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceAutofillRequest {
    return new GoodsDispatchesServiceAutofillRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServiceAutofillRequest | PlainMessage<GoodsDispatchesServiceAutofillRequest> | undefined, b: GoodsDispatchesServiceAutofillRequest | PlainMessage<GoodsDispatchesServiceAutofillRequest> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServiceAutofillRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Genesis.GoodsDispatch
 */
export class GoodsDispatch extends Message<GoodsDispatch> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this goods dispatch
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Genesis.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this goods dispatch
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this goods dispatch
   *
   * @generated from field: repeated Genesis.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this goods dispatch was marked as completed
   *
   * @generated from field: int64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the goods dispatch
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The list of associated goods dispatch items
   *
   * @generated from field: repeated Genesis.GoodsDispatchItem list = 20;
   */
  list: GoodsDispatchItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatum form_data = 30;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<GoodsDispatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "list", kind: "message", T: GoodsDispatchItem, repeated: true },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatch {
    return new GoodsDispatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatch {
    return new GoodsDispatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatch {
    return new GoodsDispatch().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatch | PlainMessage<GoodsDispatch> | undefined, b: GoodsDispatch | PlainMessage<GoodsDispatch> | undefined): boolean {
    return proto3.util.equals(GoodsDispatch, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an item to a goods dispatch
 *
 * @generated from message Genesis.GoodsDispatchesServiceItemCreateRequest
 */
export class GoodsDispatchesServiceItemCreateRequest extends Message<GoodsDispatchesServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the goods dispatch ID
   *
   * @generated from field: int64 goods_dispatch_id = 10;
   */
  goodsDispatchId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: int64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * Stores the item hash to be dispatched
   *
   * @generated from field: string item_hash = 12;
   */
  itemHash = "";

  /**
   * The quantity (in cents) being dispatched in internal unit of material
   *
   * @generated from field: int64 internal_quantity = 13;
   */
  internalQuantity = protoInt64.zero;

  /**
   * Stores the ID of the client's unit of material
   *
   * @generated from field: int64 client_uom_id = 14;
   */
  clientUomId = protoInt64.zero;

  /**
   * Stores the quantity (in cents) being dispatched in client's unit of material
   *
   * @generated from field: int64 client_quantity = 15;
   */
  clientQuantity = protoInt64.zero;

  /**
   * Stores the family code as defined by the client
   *
   * @generated from field: string client_family_code = 16;
   */
  clientFamilyCode = "";

  constructor(data?: PartialMessage<GoodsDispatchesServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "goods_dispatch_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "item_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "internal_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "client_uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "client_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "client_family_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServiceItemCreateRequest {
    return new GoodsDispatchesServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceItemCreateRequest {
    return new GoodsDispatchesServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceItemCreateRequest {
    return new GoodsDispatchesServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServiceItemCreateRequest | PlainMessage<GoodsDispatchesServiceItemCreateRequest> | undefined, b: GoodsDispatchesServiceItemCreateRequest | PlainMessage<GoodsDispatchesServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an item in a goods dispatch
 *
 * @generated from message Genesis.GoodsDispatchesServiceItemUpdateRequest
 */
export class GoodsDispatchesServiceItemUpdateRequest extends Message<GoodsDispatchesServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Stores the item hash to be dispatched
   *
   * @generated from field: string item_hash = 12;
   */
  itemHash = "";

  /**
   * The quantity (in cents) being dispatched in internal unit of material
   *
   * @generated from field: int64 internal_quantity = 13;
   */
  internalQuantity = protoInt64.zero;

  /**
   * Stores the ID of the client's unit of material
   *
   * @generated from field: int64 client_uom_id = 14;
   */
  clientUomId = protoInt64.zero;

  /**
   * Stores the quantity (in cents) being dispatched in client's unit of material
   *
   * @generated from field: int64 client_quantity = 15;
   */
  clientQuantity = protoInt64.zero;

  /**
   * Stores the family code as defined by the client
   *
   * @generated from field: string client_family_code = 16;
   */
  clientFamilyCode = "";

  constructor(data?: PartialMessage<GoodsDispatchesServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "item_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "internal_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "client_uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "client_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "client_family_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServiceItemUpdateRequest {
    return new GoodsDispatchesServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceItemUpdateRequest {
    return new GoodsDispatchesServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceItemUpdateRequest {
    return new GoodsDispatchesServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServiceItemUpdateRequest | PlainMessage<GoodsDispatchesServiceItemUpdateRequest> | undefined, b: GoodsDispatchesServiceItemUpdateRequest | PlainMessage<GoodsDispatchesServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an item associated to a goods dispatch
 *
 * @generated from message Genesis.GoodsDispatchItem
 */
export class GoodsDispatchItem extends Message<GoodsDispatchItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this goods dispatch
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Genesis.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the goods dispatch ID
   *
   * @generated from field: int64 goods_dispatch_id = 10;
   */
  goodsDispatchId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: int64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * Stores the item hash to be dispatched
   *
   * @generated from field: string item_hash = 12;
   */
  itemHash = "";

  /**
   * The quantity (in cents) being dispatched in internal unit of material
   *
   * @generated from field: int64 internal_quantity = 13;
   */
  internalQuantity = protoInt64.zero;

  /**
   * Stores the ID of the client's unit of material
   *
   * @generated from field: int64 client_uom_id = 14;
   */
  clientUomId = protoInt64.zero;

  /**
   * Stores the quantity (in cents) being dispatched in client's unit of material
   *
   * @generated from field: int64 client_quantity = 15;
   */
  clientQuantity = protoInt64.zero;

  /**
   * Stores the family code as defined by the client
   *
   * @generated from field: string client_family_code = 16;
   */
  clientFamilyCode = "";

  constructor(data?: PartialMessage<GoodsDispatchItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "goods_dispatch_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "item_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "internal_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "client_uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "client_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "client_family_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchItem {
    return new GoodsDispatchItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchItem {
    return new GoodsDispatchItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchItem {
    return new GoodsDispatchItem().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchItem | PlainMessage<GoodsDispatchItem> | undefined, b: GoodsDispatchItem | PlainMessage<GoodsDispatchItem> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of goods dispatches
 *
 * @generated from message Genesis.GoodsDispatchesList
 */
export class GoodsDispatchesList extends Message<GoodsDispatchesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Genesis.GoodsDispatch list = 1;
   */
  list: GoodsDispatch[] = [];

  constructor(data?: PartialMessage<GoodsDispatchesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: GoodsDispatch, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesList {
    return new GoodsDispatchesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesList {
    return new GoodsDispatchesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesList {
    return new GoodsDispatchesList().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesList | PlainMessage<GoodsDispatchesList> | undefined, b: GoodsDispatchesList | PlainMessage<GoodsDispatchesList> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of goods dispatch items
 *
 * @generated from message Genesis.GoodsDispatchesItemsList
 */
export class GoodsDispatchesItemsList extends Message<GoodsDispatchesItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Genesis.GoodsDispatchItem list = 1;
   */
  list: GoodsDispatchItem[] = [];

  constructor(data?: PartialMessage<GoodsDispatchesItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: GoodsDispatchItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesItemsList {
    return new GoodsDispatchesItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesItemsList {
    return new GoodsDispatchesItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesItemsList {
    return new GoodsDispatchesItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesItemsList | PlainMessage<GoodsDispatchesItemsList> | undefined, b: GoodsDispatchesItemsList | PlainMessage<GoodsDispatchesItemsList> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Genesis.GoodsDispatchItemHistoryRequest
 */
export class GoodsDispatchItemHistoryRequest extends Message<GoodsDispatchItemHistoryRequest> {
  /**
   * Stores the goods dispatch ID
   *
   * @generated from field: int64 goods_dispatch_id = 10;
   */
  goodsDispatchId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: int64 family_id = 11;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<GoodsDispatchItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "goods_dispatch_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchItemHistoryRequest {
    return new GoodsDispatchItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchItemHistoryRequest {
    return new GoodsDispatchItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchItemHistoryRequest {
    return new GoodsDispatchItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchItemHistoryRequest | PlainMessage<GoodsDispatchItemHistoryRequest> | undefined, b: GoodsDispatchItemHistoryRequest | PlainMessage<GoodsDispatchItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the info of a prospective goods dispatch item
 *
 * @generated from message Genesis.GoodsDispatchItemProspectiveInfoRequest
 */
export class GoodsDispatchItemProspectiveInfoRequest extends Message<GoodsDispatchItemProspectiveInfoRequest> {
  /**
   * Stores the goods dispatch ID
   *
   * @generated from field: int64 goods_dispatch_id = 10;
   */
  goodsDispatchId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: int64 family_id = 11;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<GoodsDispatchItemProspectiveInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchItemProspectiveInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "goods_dispatch_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchItemProspectiveInfoRequest {
    return new GoodsDispatchItemProspectiveInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchItemProspectiveInfoRequest {
    return new GoodsDispatchItemProspectiveInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchItemProspectiveInfoRequest {
    return new GoodsDispatchItemProspectiveInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchItemProspectiveInfoRequest | PlainMessage<GoodsDispatchItemProspectiveInfoRequest> | undefined, b: GoodsDispatchItemProspectiveInfoRequest | PlainMessage<GoodsDispatchItemProspectiveInfoRequest> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchItemProspectiveInfoRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve the quantity that has already been added for the specific ref_from, ref_id and family_id
 *
 * @generated from message Genesis.GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest
 */
export class GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest extends Message<GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest> {
  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 1;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 2;
   */
  refId = protoInt64.zero;

  /**
   * The associated family ID
   *
   * @generated from field: int64 family_id = 3;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "family_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest {
    return new GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest {
    return new GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest {
    return new GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest | PlainMessage<GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest> | undefined, b: GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest | PlainMessage<GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServiceAlreadyAddedQuantityForSourceRequest, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Genesis.GoodsDispatchesServicePaginationReq
 */
export class GoodsDispatchesServicePaginationReq extends Message<GoodsDispatchesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.GOODS_DISPATCH_SORT_KEY sort_key = 5;
   */
  sortKey = GOODS_DISPATCH_SORT_KEY.GOODS_DISPATCH_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this goods dispatch
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  constructor(data?: PartialMessage<GoodsDispatchesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GOODS_DISPATCH_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServicePaginationReq {
    return new GoodsDispatchesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServicePaginationReq {
    return new GoodsDispatchesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServicePaginationReq {
    return new GoodsDispatchesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServicePaginationReq | PlainMessage<GoodsDispatchesServicePaginationReq> | undefined, b: GoodsDispatchesServicePaginationReq | PlainMessage<GoodsDispatchesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Genesis.GoodsDispatchesServicePaginationResponse
 */
export class GoodsDispatchesServicePaginationResponse extends Message<GoodsDispatchesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: int64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Genesis.GoodsDispatch payload = 4;
   */
  payload: GoodsDispatch[] = [];

  constructor(data?: PartialMessage<GoodsDispatchesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "payload", kind: "message", T: GoodsDispatch, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServicePaginationResponse {
    return new GoodsDispatchesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServicePaginationResponse {
    return new GoodsDispatchesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServicePaginationResponse {
    return new GoodsDispatchesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServicePaginationResponse | PlainMessage<GoodsDispatchesServicePaginationResponse> | undefined, b: GoodsDispatchesServicePaginationResponse | PlainMessage<GoodsDispatchesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records associated with an entity UUID
 *
 * @generated from message Genesis.GoodsDispatchesServiceEntityPaginationReq
 */
export class GoodsDispatchesServiceEntityPaginationReq extends Message<GoodsDispatchesServiceEntityPaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.GOODS_DISPATCH_SORT_KEY sort_key = 5;
   */
  sortKey = GOODS_DISPATCH_SORT_KEY.GOODS_DISPATCH_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<GoodsDispatchesServiceEntityPaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServiceEntityPaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GOODS_DISPATCH_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServiceEntityPaginationReq {
    return new GoodsDispatchesServiceEntityPaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceEntityPaginationReq {
    return new GoodsDispatchesServiceEntityPaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceEntityPaginationReq {
    return new GoodsDispatchesServiceEntityPaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServiceEntityPaginationReq | PlainMessage<GoodsDispatchesServiceEntityPaginationReq> | undefined, b: GoodsDispatchesServiceEntityPaginationReq | PlainMessage<GoodsDispatchesServiceEntityPaginationReq> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServiceEntityPaginationReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Genesis.GoodsDispatchesServiceFilterReq
 */
export class GoodsDispatchesServiceFilterReq extends Message<GoodsDispatchesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.GOODS_DISPATCH_SORT_KEY sort_key = 5;
   */
  sortKey = GOODS_DISPATCH_SORT_KEY.GOODS_DISPATCH_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this goods dispatch
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: int64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: int64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: int64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: int64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: int64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: int64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the goods dispatch
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 22;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 23;
   */
  refId = protoInt64.zero;

  /**
   * The status of the goods dispatch bill
   *
   * @generated from field: Genesis.GOODS_DISPATCH_BILLING_STATUS billing_status = 40;
   */
  billingStatus = GOODS_DISPATCH_BILLING_STATUS.GOODS_DISPATCH_BILLING_STATUS_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<GoodsDispatchesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GOODS_DISPATCH_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 40, name: "billing_status", kind: "enum", T: proto3.getEnumType(GOODS_DISPATCH_BILLING_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServiceFilterReq {
    return new GoodsDispatchesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceFilterReq {
    return new GoodsDispatchesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceFilterReq {
    return new GoodsDispatchesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServiceFilterReq | PlainMessage<GoodsDispatchesServiceFilterReq> | undefined, b: GoodsDispatchesServiceFilterReq | PlainMessage<GoodsDispatchesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Genesis.GoodsDispatchesServiceSearchAllReq
 */
export class GoodsDispatchesServiceSearchAllReq extends Message<GoodsDispatchesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.GOODS_DISPATCH_SORT_KEY sort_key = 5;
   */
  sortKey = GOODS_DISPATCH_SORT_KEY.GOODS_DISPATCH_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 22;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 23;
   */
  refId = protoInt64.zero;

  /**
   * The status of the goods dispatch bill
   *
   * @generated from field: Genesis.GOODS_DISPATCH_BILLING_STATUS billing_status = 40;
   */
  billingStatus = GOODS_DISPATCH_BILLING_STATUS.GOODS_DISPATCH_BILLING_STATUS_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<GoodsDispatchesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoodsDispatchesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GOODS_DISPATCH_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 40, name: "billing_status", kind: "enum", T: proto3.getEnumType(GOODS_DISPATCH_BILLING_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodsDispatchesServiceSearchAllReq {
    return new GoodsDispatchesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceSearchAllReq {
    return new GoodsDispatchesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodsDispatchesServiceSearchAllReq {
    return new GoodsDispatchesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: GoodsDispatchesServiceSearchAllReq | PlainMessage<GoodsDispatchesServiceSearchAllReq> | undefined, b: GoodsDispatchesServiceSearchAllReq | PlainMessage<GoodsDispatchesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(GoodsDispatchesServiceSearchAllReq, a, b);
  }
}

