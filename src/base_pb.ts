// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file base.proto (package Genesis, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 *
 * Describes the order in which the records need to be returned
 *
 * @generated from enum Genesis.SORT_ORDER
 */
export enum SORT_ORDER {
  /**
   * Fetch results in the ascending order of the provided sort key
   *
   * @generated from enum value: ASCENDING_UNSPECIFIED = 0;
   */
  ASCENDING_UNSPECIFIED = 0,

  /**
   * Fetch results in the descending order of the provided sort key
   *
   * @generated from enum value: DESCENDING = 1;
   */
  DESCENDING = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SORT_ORDER)
proto3.util.setEnumType(SORT_ORDER, "Genesis.SORT_ORDER", [
  { no: 0, name: "ASCENDING_UNSPECIFIED" },
  { no: 1, name: "DESCENDING" },
]);

/**
 *
 * Describes the standard lifecycle status of each record
 *
 * @generated from enum Genesis.STANDARD_LIFECYCLE_STATUS
 */
export enum STANDARD_LIFECYCLE_STATUS {
  /**
   * The resource has just been created, and has been sent for verification
   *
   * @generated from enum value: PREVERIFY_UNSPECIFIED = 0;
   */
  PREVERIFY_UNSPECIFIED = 0,

  /**
   * The resource has been saved as a draft
   *
   * @generated from enum value: DRAFT = 1;
   */
  DRAFT = 1,

  /**
   * The resource has been verified
   *
   * @generated from enum value: VERIFIED = 2;
   */
  VERIFIED = 2,

  /**
   * The resource has been approved
   *
   * @generated from enum value: STANDING = 3;
   */
  STANDING = 3,

  /**
   * The resource has been sent for revision
   *
   * @generated from enum value: REVISION = 4;
   */
  REVISION = 4,

  /**
   * The resource has been halted
   *
   * @generated from enum value: HALTED = 5;
   */
  HALTED = 5,

  /**
   * The resource has been marked as completed
   *
   * @generated from enum value: COMPLETED = 6;
   */
  COMPLETED = 6,

  /**
   * The resource has been discarded
   *
   * @generated from enum value: DISCARDED = 7;
   */
  DISCARDED = 7,

  /**
   * Use this only in filter and search queries so as to retrieve all the records regardless of the status that they are in
   *
   * @generated from enum value: ANY = 10;
   */
  ANY = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS)
proto3.util.setEnumType(STANDARD_LIFECYCLE_STATUS, "Genesis.STANDARD_LIFECYCLE_STATUS", [
  { no: 0, name: "PREVERIFY_UNSPECIFIED" },
  { no: 1, name: "DRAFT" },
  { no: 2, name: "VERIFIED" },
  { no: 3, name: "STANDING" },
  { no: 4, name: "REVISION" },
  { no: 5, name: "HALTED" },
  { no: 6, name: "COMPLETED" },
  { no: 7, name: "DISCARDED" },
  { no: 10, name: "ANY" },
]);

/**
 *
 * Describes all the possible values within a logbook operation
 *
 * @generated from enum Genesis.LOGBOOK_OPERATION
 */
export enum LOGBOOK_OPERATION {
  /**
   * Create a resource
   *
   * @generated from enum value: CREATE_UNSPECIFIED = 0;
   */
  CREATE_UNSPECIFIED = 0,

  /**
   * Update a resource
   *
   * @generated from enum value: UPDATE = 1;
   */
  UPDATE = 1,

  /**
   * Archive a resource
   *
   * @generated from enum value: ARCHIVE = 2;
   */
  ARCHIVE = 2,

  /**
   * Restore a resource
   *
   * @generated from enum value: RESTORE = 3;
   */
  RESTORE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(LOGBOOK_OPERATION)
proto3.util.setEnumType(LOGBOOK_OPERATION, "Genesis.LOGBOOK_OPERATION", [
  { no: 0, name: "CREATE_UNSPECIFIED" },
  { no: 1, name: "UPDATE" },
  { no: 2, name: "ARCHIVE" },
  { no: 3, name: "RESTORE" },
]);

/**
 *
 * Describes an empty object
 *
 * @generated from message Genesis.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 *
 * Describes the boolean response
 *
 * @generated from message Genesis.BooleanResponse
 */
export class BooleanResponse extends Message<BooleanResponse> {
  /**
   * Stores if the value is true or false
   *
   * @generated from field: bool value = 1;
   */
  value = false;

  constructor(data?: PartialMessage<BooleanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.BooleanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BooleanResponse {
    return new BooleanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BooleanResponse {
    return new BooleanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BooleanResponse {
    return new BooleanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BooleanResponse | PlainMessage<BooleanResponse> | undefined, b: BooleanResponse | PlainMessage<BooleanResponse> | undefined): boolean {
    return proto3.util.equals(BooleanResponse, a, b);
  }
}

/**
 *
 * Describes a generic response that consists of bytes as payload
 *
 * @generated from message Genesis.BytesResponse
 */
export class BytesResponse extends Message<BytesResponse> {
  /**
   * Stores the response content in bytes
   *
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<BytesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.BytesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BytesResponse {
    return new BytesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BytesResponse {
    return new BytesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BytesResponse {
    return new BytesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BytesResponse | PlainMessage<BytesResponse> | undefined, b: BytesResponse | PlainMessage<BytesResponse> | undefined): boolean {
    return proto3.util.equals(BytesResponse, a, b);
  }
}

/**
 *
 * Describes a generic response that consists of info of an image
 *
 * @generated from message Genesis.ImageResponse
 */
export class ImageResponse extends Message<ImageResponse> {
  /**
   * Stores the raw image content
   *
   * @generated from field: bytes image = 1;
   */
  image = new Uint8Array(0);

  /**
   * Stores the MIME type of the image
   *
   * @generated from field: string mime_type = 2;
   */
  mimeType = "";

  /**
   * The timestamp of when the image was captured
   *
   * @generated from field: int64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<ImageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.ImageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImageResponse {
    return new ImageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImageResponse {
    return new ImageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImageResponse {
    return new ImageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ImageResponse | PlainMessage<ImageResponse> | undefined, b: ImageResponse | PlainMessage<ImageResponse> | undefined): boolean {
    return proto3.util.equals(ImageResponse, a, b);
  }
}

/**
 *
 * Describes the message that consists of a base64 string. Useful for relaying an image as a base64 string.
 *
 * @generated from message Genesis.Base64String
 */
export class Base64String extends Message<Base64String> {
  /**
   * Stores the image as a base64 string
   *
   * @generated from field: string image = 1;
   */
  image = "";

  constructor(data?: PartialMessage<Base64String>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.Base64String";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Base64String {
    return new Base64String().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Base64String {
    return new Base64String().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Base64String {
    return new Base64String().fromJsonString(jsonString, options);
  }

  static equals(a: Base64String | PlainMessage<Base64String> | undefined, b: Base64String | PlainMessage<Base64String> | undefined): boolean {
    return proto3.util.equals(Base64String, a, b);
  }
}

/**
 *
 * Describes the payload that will be used to filter records on the basis of the given month and day
 *
 * @generated from message Genesis.MonthAndDayFilter
 */
export class MonthAndDayFilter extends Message<MonthAndDayFilter> {
  /**
   * Stores the month (1 for Jan, 2 for Feb, etc.)
   *
   * @generated from field: int64 month = 1;
   */
  month = protoInt64.zero;

  /**
   * Stores the day
   *
   * @generated from field: int64 day = 2;
   */
  day = protoInt64.zero;

  constructor(data?: PartialMessage<MonthAndDayFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.MonthAndDayFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "month", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "day", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MonthAndDayFilter {
    return new MonthAndDayFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MonthAndDayFilter {
    return new MonthAndDayFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MonthAndDayFilter {
    return new MonthAndDayFilter().fromJsonString(jsonString, options);
  }

  static equals(a: MonthAndDayFilter | PlainMessage<MonthAndDayFilter> | undefined, b: MonthAndDayFilter | PlainMessage<MonthAndDayFilter> | undefined): boolean {
    return proto3.util.equals(MonthAndDayFilter, a, b);
  }
}

/**
 *
 * Describes a generic response that represents a GPS coordinate
 *
 * @generated from message Genesis.GPSCoordinatesResponse
 */
export class GPSCoordinatesResponse extends Message<GPSCoordinatesResponse> {
  /**
   * Stores the latitude
   *
   * @generated from field: double latitude = 1;
   */
  latitude = 0;

  /**
   * Stores the longitude
   *
   * @generated from field: double longitude = 2;
   */
  longitude = 0;

  constructor(data?: PartialMessage<GPSCoordinatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GPSCoordinatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GPSCoordinatesResponse {
    return new GPSCoordinatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GPSCoordinatesResponse {
    return new GPSCoordinatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GPSCoordinatesResponse {
    return new GPSCoordinatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GPSCoordinatesResponse | PlainMessage<GPSCoordinatesResponse> | undefined, b: GPSCoordinatesResponse | PlainMessage<GPSCoordinatesResponse> | undefined): boolean {
    return proto3.util.equals(GPSCoordinatesResponse, a, b);
  }
}

/**
 *
 * Describes the payload for a request to determine the count of records in the given status
 *
 * @generated from message Genesis.CountInSLCStatusRequest
 */
export class CountInSLCStatusRequest extends Message<CountInSLCStatusRequest> {
  /**
   * Denote if only active records need to be returned
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The standard lifecycle status
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 2;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  constructor(data?: PartialMessage<CountInSLCStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.CountInSLCStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountInSLCStatusRequest {
    return new CountInSLCStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountInSLCStatusRequest {
    return new CountInSLCStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountInSLCStatusRequest {
    return new CountInSLCStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountInSLCStatusRequest | PlainMessage<CountInSLCStatusRequest> | undefined, b: CountInSLCStatusRequest | PlainMessage<CountInSLCStatusRequest> | undefined): boolean {
    return proto3.util.equals(CountInSLCStatusRequest, a, b);
  }
}

/**
 *
 * Describes the count response
 *
 * @generated from message Genesis.CountResponse
 */
export class CountResponse extends Message<CountResponse> {
  /**
   * The number of records
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<CountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.CountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountResponse {
    return new CountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountResponse {
    return new CountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountResponse {
    return new CountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountResponse | PlainMessage<CountResponse> | undefined, b: CountResponse | PlainMessage<CountResponse> | undefined): boolean {
    return proto3.util.equals(CountResponse, a, b);
  }
}

/**
 *
 * Describes the quantity response
 *
 * @generated from message Genesis.QuantityResponse
 */
export class QuantityResponse extends Message<QuantityResponse> {
  /**
   * The quantity
   *
   * @generated from field: int64 quantity = 1;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<QuantityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.QuantityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuantityResponse {
    return new QuantityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuantityResponse {
    return new QuantityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuantityResponse {
    return new QuantityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuantityResponse | PlainMessage<QuantityResponse> | undefined, b: QuantityResponse | PlainMessage<QuantityResponse> | undefined): boolean {
    return proto3.util.equals(QuantityResponse, a, b);
  }
}

/**
 *
 * Describes the dual quantity response. Primary quantity represents quantity in internal UoM and secondary quantity represents quantity in either vendor UoM or client UoM, depending on the context
 *
 * @generated from message Genesis.DualQuantitiesResponse
 */
export class DualQuantitiesResponse extends Message<DualQuantitiesResponse> {
  /**
   * Quantity in internal UoM
   *
   * @generated from field: int64 primary_quantity = 1;
   */
  primaryQuantity = protoInt64.zero;

  /**
   * Quantity in either vendor or client UoM
   *
   * @generated from field: int64 secondary_quantity = 2;
   */
  secondaryQuantity = protoInt64.zero;

  constructor(data?: PartialMessage<DualQuantitiesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.DualQuantitiesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primary_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "secondary_quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DualQuantitiesResponse {
    return new DualQuantitiesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DualQuantitiesResponse {
    return new DualQuantitiesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DualQuantitiesResponse {
    return new DualQuantitiesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DualQuantitiesResponse | PlainMessage<DualQuantitiesResponse> | undefined, b: DualQuantitiesResponse | PlainMessage<DualQuantitiesResponse> | undefined): boolean {
    return proto3.util.equals(DualQuantitiesResponse, a, b);
  }
}

/**
 *
 * Describes the employee metadata of each resource
 *
 * @generated from message Genesis.EmployeeMetadata
 */
export class EmployeeMetadata extends Message<EmployeeMetadata> {
  /**
   * ID of the resource
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * UUID of the resource
   *
   * @generated from field: bytes uuid = 2;
   */
  uuid = new Uint8Array(0);

  /**
   * Stores the username of the user who added this resource
   *
   * @generated from field: string added_by = 3;
   */
  addedBy = "";

  /**
   * Represents if the resource is active
   *
   * @generated from field: bool is_active = 4;
   */
  isActive = false;

  /**
   * Stores the timestamp of when the resource was created
   *
   * @generated from field: int64 created_at = 5;
   */
  createdAt = protoInt64.zero;

  /**
   * Stores the timestamp of when the resource was last modified
   *
   * @generated from field: int64 modified_at = 6;
   */
  modifiedAt = protoInt64.zero;

  constructor(data?: PartialMessage<EmployeeMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.EmployeeMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "added_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "modified_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmployeeMetadata {
    return new EmployeeMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmployeeMetadata {
    return new EmployeeMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmployeeMetadata {
    return new EmployeeMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: EmployeeMetadata | PlainMessage<EmployeeMetadata> | undefined, b: EmployeeMetadata | PlainMessage<EmployeeMetadata> | undefined): boolean {
    return proto3.util.equals(EmployeeMetadata, a, b);
  }
}

/**
 *
 * Describes the approval metadata of each resource
 *
 * @generated from message Genesis.ApprovalMetadata
 */
export class ApprovalMetadata extends Message<ApprovalMetadata> {
  /**
   * Stores the UNIX timestamp of when a resource was approved
   *
   * @generated from field: int64 approved_on = 1;
   */
  approvedOn = protoInt64.zero;

  /**
   * Stores the ID of the user who approved this resource
   *
   * @generated from field: int64 approved_by_user_id = 2;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * Stores the Role ID of the user who approved this resource at the time of approval. This needs to be stored, as the user's role is fluid
   *
   * @generated from field: int64 approver_role_id = 3;
   */
  approverRoleId = protoInt64.zero;

  constructor(data?: PartialMessage<ApprovalMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.ApprovalMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "approved_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApprovalMetadata {
    return new ApprovalMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApprovalMetadata {
    return new ApprovalMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApprovalMetadata {
    return new ApprovalMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ApprovalMetadata | PlainMessage<ApprovalMetadata> | undefined, b: ApprovalMetadata | PlainMessage<ApprovalMetadata> | undefined): boolean {
    return proto3.util.equals(ApprovalMetadata, a, b);
  }
}

/**
 *
 * Describes the status of the records returned to a request
 *
 * @generated from message Genesis.ActiveStatus
 */
export class ActiveStatus extends Message<ActiveStatus> {
  /**
   * Used in ViewAll procedural calls, to denote if only active records need to be returned
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  constructor(data?: PartialMessage<ActiveStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.ActiveStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveStatus {
    return new ActiveStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveStatus {
    return new ActiveStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveStatus {
    return new ActiveStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ActiveStatus | PlainMessage<ActiveStatus> | undefined, b: ActiveStatus | PlainMessage<ActiveStatus> | undefined): boolean {
    return proto3.util.equals(ActiveStatus, a, b);
  }
}

/**
 *
 * Describes the payload that is required to update the password of a user (by an administrator)
 *
 * @generated from message Genesis.UpdatePasswordReq
 */
export class UpdatePasswordReq extends Message<UpdatePasswordReq> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The plain text password using which the user can login
   *
   * @generated from field: string plain_text_password = 10;
   */
  plainTextPassword = "";

  constructor(data?: PartialMessage<UpdatePasswordReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.UpdatePasswordReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "plain_text_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePasswordReq {
    return new UpdatePasswordReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePasswordReq {
    return new UpdatePasswordReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePasswordReq {
    return new UpdatePasswordReq().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePasswordReq | PlainMessage<UpdatePasswordReq> | undefined, b: UpdatePasswordReq | PlainMessage<UpdatePasswordReq> | undefined): boolean {
    return proto3.util.equals(UpdatePasswordReq, a, b);
  }
}

/**
 *
 * Describes the payload that is requred to update the user's own password
 *
 * @generated from message Genesis.UpdateOwnPasswordReq
 */
export class UpdateOwnPasswordReq extends Message<UpdateOwnPasswordReq> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The old login password
   *
   * @generated from field: string old_plain_text_password = 3;
   */
  oldPlainTextPassword = "";

  /**
   * The new password
   *
   * @generated from field: string plain_text_password = 4;
   */
  plainTextPassword = "";

  constructor(data?: PartialMessage<UpdateOwnPasswordReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.UpdateOwnPasswordReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "old_plain_text_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "plain_text_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOwnPasswordReq {
    return new UpdateOwnPasswordReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOwnPasswordReq {
    return new UpdateOwnPasswordReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOwnPasswordReq {
    return new UpdateOwnPasswordReq().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOwnPasswordReq | PlainMessage<UpdateOwnPasswordReq> | undefined, b: UpdateOwnPasswordReq | PlainMessage<UpdateOwnPasswordReq> | undefined): boolean {
    return proto3.util.equals(UpdateOwnPasswordReq, a, b);
  }
}

/**
 *
 * Describes the payload that is required to upload a picture associated to a resource (such as profile picture or signature)
 *
 * @generated from message Genesis.UploadPictureReq
 */
export class UploadPictureReq extends Message<UploadPictureReq> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The base64 encoded image that is to be set as the profile picture
   *
   * @generated from field: string img = 10;
   */
  img = "";

  /**
   * The MIME type of the profile picture
   *
   * @generated from field: string mime_type = 11;
   */
  mimeType = "";

  constructor(data?: PartialMessage<UploadPictureReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.UploadPictureReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "img", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadPictureReq {
    return new UploadPictureReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadPictureReq {
    return new UploadPictureReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadPictureReq {
    return new UploadPictureReq().fromJsonString(jsonString, options);
  }

  static equals(a: UploadPictureReq | PlainMessage<UploadPictureReq> | undefined, b: UploadPictureReq | PlainMessage<UploadPictureReq> | undefined): boolean {
    return proto3.util.equals(UploadPictureReq, a, b);
  }
}

/**
 *
 * Describes a simple search request
 *
 * @generated from message Genesis.SimpleSearchReq
 */
export class SimpleSearchReq extends Message<SimpleSearchReq> {
  /**
   * @generated from field: string search_key = 1;
   */
  searchKey = "";

  constructor(data?: PartialMessage<SimpleSearchReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.SimpleSearchReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleSearchReq {
    return new SimpleSearchReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleSearchReq {
    return new SimpleSearchReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleSearchReq {
    return new SimpleSearchReq().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleSearchReq | PlainMessage<SimpleSearchReq> | undefined, b: SimpleSearchReq | PlainMessage<SimpleSearchReq> | undefined): boolean {
    return proto3.util.equals(SimpleSearchReq, a, b);
  }
}

/**
 *
 * Describes the standard identifier
 *
 * @generated from message Genesis.Identifier
 */
export class Identifier extends Message<Identifier> {
  /**
   * ID of the resource
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<Identifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.Identifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Identifier {
    return new Identifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Identifier {
    return new Identifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Identifier {
    return new Identifier().fromJsonString(jsonString, options);
  }

  static equals(a: Identifier | PlainMessage<Identifier> | undefined, b: Identifier | PlainMessage<Identifier> | undefined): boolean {
    return proto3.util.equals(Identifier, a, b);
  }
}

/**
 *
 * Describes the standard identifier that can also be a zero
 *
 * @generated from message Genesis.IdentifierZeroable
 */
export class IdentifierZeroable extends Message<IdentifierZeroable> {
  /**
   * ID of the resource
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<IdentifierZeroable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.IdentifierZeroable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifierZeroable {
    return new IdentifierZeroable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifierZeroable {
    return new IdentifierZeroable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifierZeroable {
    return new IdentifierZeroable().fromJsonString(jsonString, options);
  }

  static equals(a: IdentifierZeroable | PlainMessage<IdentifierZeroable> | undefined, b: IdentifierZeroable | PlainMessage<IdentifierZeroable> | undefined): boolean {
    return proto3.util.equals(IdentifierZeroable, a, b);
  }
}

/**
 *
 * Describes the standard identifier along with a search key
 *
 * @generated from message Genesis.IdentifierWithSearch
 */
export class IdentifierWithSearch extends Message<IdentifierWithSearch> {
  /**
   * ID of the resource
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 2;
   */
  searchKey = "";

  constructor(data?: PartialMessage<IdentifierWithSearch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.IdentifierWithSearch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifierWithSearch {
    return new IdentifierWithSearch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifierWithSearch {
    return new IdentifierWithSearch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifierWithSearch {
    return new IdentifierWithSearch().fromJsonString(jsonString, options);
  }

  static equals(a: IdentifierWithSearch | PlainMessage<IdentifierWithSearch> | undefined, b: IdentifierWithSearch | PlainMessage<IdentifierWithSearch> | undefined): boolean {
    return proto3.util.equals(IdentifierWithSearch, a, b);
  }
}

/**
 *
 * Describes the list of standard identifiers, used for identifying associated items
 *
 * @generated from message Genesis.IdentifiersList
 */
export class IdentifiersList extends Message<IdentifiersList> {
  /**
   * List of identifiers
   *
   * @generated from field: repeated int64 list = 1;
   */
  list: bigint[] = [];

  constructor(data?: PartialMessage<IdentifiersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.IdentifiersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifiersList {
    return new IdentifiersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifiersList {
    return new IdentifiersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifiersList {
    return new IdentifiersList().fromJsonString(jsonString, options);
  }

  static equals(a: IdentifiersList | PlainMessage<IdentifiersList> | undefined, b: IdentifiersList | PlainMessage<IdentifiersList> | undefined): boolean {
    return proto3.util.equals(IdentifiersList, a, b);
  }
}

/**
 *
 * Describes the standard identifier with a user comment. Useful when an operation needs to be performed, and a user comment needs to be recorded
 *
 * @generated from message Genesis.IdentifierWithUserComment
 */
export class IdentifierWithUserComment extends Message<IdentifierWithUserComment> {
  /**
   * ID of the resource
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  constructor(data?: PartialMessage<IdentifierWithUserComment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.IdentifierWithUserComment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifierWithUserComment {
    return new IdentifierWithUserComment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifierWithUserComment {
    return new IdentifierWithUserComment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifierWithUserComment {
    return new IdentifierWithUserComment().fromJsonString(jsonString, options);
  }

  static equals(a: IdentifierWithUserComment | PlainMessage<IdentifierWithUserComment> | undefined, b: IdentifierWithUserComment | PlainMessage<IdentifierWithUserComment> | undefined): boolean {
    return proto3.util.equals(IdentifierWithUserComment, a, b);
  }
}

/**
 *
 * Describes the standard identifier with email attributes. Useful when a record (identified by the identifier) needs to be mailed with the given subject, and the list of email addresses.
 *
 * @generated from message Genesis.IdentifierWithEmailAttributes
 */
export class IdentifierWithEmailAttributes extends Message<IdentifierWithEmailAttributes> {
  /**
   * ID of the resource
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * The subject of the email
   *
   * @generated from field: string subject = 10;
   */
  subject = "";

  /**
   * The list of email addresses of the recipients
   *
   * @generated from field: repeated string recipients = 11;
   */
  recipients: string[] = [];

  /**
   * The body of the email
   *
   * @generated from field: string body = 12;
   */
  body = "";

  constructor(data?: PartialMessage<IdentifierWithEmailAttributes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.IdentifierWithEmailAttributes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "recipients", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifierWithEmailAttributes {
    return new IdentifierWithEmailAttributes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifierWithEmailAttributes {
    return new IdentifierWithEmailAttributes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifierWithEmailAttributes {
    return new IdentifierWithEmailAttributes().fromJsonString(jsonString, options);
  }

  static equals(a: IdentifierWithEmailAttributes | PlainMessage<IdentifierWithEmailAttributes> | undefined, b: IdentifierWithEmailAttributes | PlainMessage<IdentifierWithEmailAttributes> | undefined): boolean {
    return proto3.util.equals(IdentifierWithEmailAttributes, a, b);
  }
}

/**
 *
 * Describes the standard identifier with a search key. Useful when searching within sub records of a parent item (such as shift group shifts, etc)
 *
 * @generated from message Genesis.IdentifierWithSearchKey
 */
export class IdentifierWithSearchKey extends Message<IdentifierWithSearchKey> {
  /**
   * ID of the resource
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * The search key
   *
   * @generated from field: string search_key = 2;
   */
  searchKey = "";

  constructor(data?: PartialMessage<IdentifierWithSearchKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.IdentifierWithSearchKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifierWithSearchKey {
    return new IdentifierWithSearchKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifierWithSearchKey {
    return new IdentifierWithSearchKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifierWithSearchKey {
    return new IdentifierWithSearchKey().fromJsonString(jsonString, options);
  }

  static equals(a: IdentifierWithSearchKey | PlainMessage<IdentifierWithSearchKey> | undefined, b: IdentifierWithSearchKey | PlainMessage<IdentifierWithSearchKey> | undefined): boolean {
    return proto3.util.equals(IdentifierWithSearchKey, a, b);
  }
}

/**
 *
 * Describes the UUID identifier
 *
 * @generated from message Genesis.IdentifierUUID
 */
export class IdentifierUUID extends Message<IdentifierUUID> {
  /**
   * UUID of the resource
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  constructor(data?: PartialMessage<IdentifierUUID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.IdentifierUUID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifierUUID {
    return new IdentifierUUID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifierUUID {
    return new IdentifierUUID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifierUUID {
    return new IdentifierUUID().fromJsonString(jsonString, options);
  }

  static equals(a: IdentifierUUID | PlainMessage<IdentifierUUID> | undefined, b: IdentifierUUID | PlainMessage<IdentifierUUID> | undefined): boolean {
    return proto3.util.equals(IdentifierUUID, a, b);
  }
}

/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being a standard lifecycle status
 *
 * @generated from message Genesis.LogbookLogConciseSLC
 */
export class LogbookLogConciseSLC extends Message<LogbookLogConciseSLC> {
  /**
   * ID of the resource
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Stores if the resource is active
   *
   * @generated from field: bool is_active = 2;
   */
  isActive = false;

  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: int64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: bytes ref_uuid = 10;
   */
  refUuid = new Uint8Array(0);

  /**
   * The operation that was performed
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS operation = 11;
   */
  operation = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The name of the person who made this entry
   *
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * The ID of the user who made this entry
   *
   * @generated from field: int64 user_id = 14;
   */
  userId = protoInt64.zero;

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 15;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 16;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogConciseSLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.LogbookLogConciseSLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogConciseSLC {
    return new LogbookLogConciseSLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogConciseSLC {
    return new LogbookLogConciseSLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogConciseSLC {
    return new LogbookLogConciseSLC().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogConciseSLC | PlainMessage<LogbookLogConciseSLC> | undefined, b: LogbookLogConciseSLC | PlainMessage<LogbookLogConciseSLC> | undefined): boolean {
    return proto3.util.equals(LogbookLogConciseSLC, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to create a standard lifecycle log entry
 *
 * @generated from message Genesis.LogbookLogConciseSLCCreateRequest
 */
export class LogbookLogConciseSLCCreateRequest extends Message<LogbookLogConciseSLCCreateRequest> {
  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: int64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: bytes ref_uuid = 10;
   */
  refUuid = new Uint8Array(0);

  /**
   * The operation that was performed
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS operation = 11;
   */
  operation = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 13;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 14;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogConciseSLCCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.LogbookLogConciseSLCCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogConciseSLCCreateRequest {
    return new LogbookLogConciseSLCCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogConciseSLCCreateRequest {
    return new LogbookLogConciseSLCCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogConciseSLCCreateRequest {
    return new LogbookLogConciseSLCCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogConciseSLCCreateRequest | PlainMessage<LogbookLogConciseSLCCreateRequest> | undefined, b: LogbookLogConciseSLCCreateRequest | PlainMessage<LogbookLogConciseSLCCreateRequest> | undefined): boolean {
    return proto3.util.equals(LogbookLogConciseSLCCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to create a generic lifecycle log entry
 *
 * @generated from message Genesis.LogbookLogConciseGenericCreateRequest
 */
export class LogbookLogConciseGenericCreateRequest extends Message<LogbookLogConciseGenericCreateRequest> {
  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: int64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: bytes ref_uuid = 10;
   */
  refUuid = new Uint8Array(0);

  /**
   * The operation that was performed
   *
   * @generated from field: string operation = 11;
   */
  operation = "";

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 13;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 14;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogConciseGenericCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.LogbookLogConciseGenericCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogConciseGenericCreateRequest {
    return new LogbookLogConciseGenericCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogConciseGenericCreateRequest {
    return new LogbookLogConciseGenericCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogConciseGenericCreateRequest {
    return new LogbookLogConciseGenericCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogConciseGenericCreateRequest | PlainMessage<LogbookLogConciseGenericCreateRequest> | undefined, b: LogbookLogConciseGenericCreateRequest | PlainMessage<LogbookLogConciseGenericCreateRequest> | undefined): boolean {
    return proto3.util.equals(LogbookLogConciseGenericCreateRequest, a, b);
  }
}

/**
 *
 * Describes each parameter that's part of the logbook (includes historical data of the object)
 *
 * @generated from message Genesis.LogbookLogComplete
 */
export class LogbookLogComplete extends Message<LogbookLogComplete> {
  /**
   * Stores the metada of this resource
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 1;
   */
  metadata?: EmployeeMetadata;

  /**
   * The UUID of the resource
   *
   * @generated from field: bytes ref_uuid = 10;
   */
  refUuid = new Uint8Array(0);

  /**
   * The operation that was performed
   *
   * @generated from field: Genesis.LOGBOOK_OPERATION operation = 11;
   */
  operation = LOGBOOK_OPERATION.CREATE_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 13;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 14;
   */
  userComment = "";

  /**
   * The marshalled object at the time the log was created
   *
   * @generated from field: bytes previous_data = 15;
   */
  previousData = new Uint8Array(0);

  constructor(data?: PartialMessage<LogbookLogComplete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.LogbookLogComplete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(LOGBOOK_OPERATION) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "previous_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogComplete {
    return new LogbookLogComplete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogComplete {
    return new LogbookLogComplete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogComplete {
    return new LogbookLogComplete().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogComplete | PlainMessage<LogbookLogComplete> | undefined, b: LogbookLogComplete | PlainMessage<LogbookLogComplete> | undefined): boolean {
    return proto3.util.equals(LogbookLogComplete, a, b);
  }
}

/**
 *
 * Describes the data model to handle reordering of items
 *
 * @generated from message Genesis.ReorderItemsRequest
 */
export class ReorderItemsRequest extends Message<ReorderItemsRequest> {
  /**
   * ID of the resource
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * The list of IDs to be stored in the given sequence
   *
   * @generated from field: repeated int64 sequence = 2;
   */
  sequence: bigint[] = [];

  constructor(data?: PartialMessage<ReorderItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.ReorderItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "sequence", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReorderItemsRequest {
    return new ReorderItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReorderItemsRequest {
    return new ReorderItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReorderItemsRequest {
    return new ReorderItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReorderItemsRequest | PlainMessage<ReorderItemsRequest> | undefined, b: ReorderItemsRequest | PlainMessage<ReorderItemsRequest> | undefined): boolean {
    return proto3.util.equals(ReorderItemsRequest, a, b);
  }
}

/**
 *
 * Describes the data model to handle cloning of properties of a source record (denoted by source ID) into a target record (denoted by the target ID)
 *
 * @generated from message Genesis.CloneRequest
 */
export class CloneRequest extends Message<CloneRequest> {
  /**
   * The ID of the source record whose properties need to be cloned into the target record
   *
   * @generated from field: int64 source_id = 1;
   */
  sourceId = protoInt64.zero;

  /**
   * The ID of the target record that will store the cloned properties from the source
   *
   * @generated from field: int64 target_id = 2;
   */
  targetId = protoInt64.zero;

  /**
   * Stores if the existing items in the target resource need to be deleted before cloning from the source resource
   *
   * @generated from field: bool delete_existing = 3;
   */
  deleteExisting = false;

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 4;
   */
  userComment = "";

  constructor(data?: PartialMessage<CloneRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.CloneRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "target_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "delete_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloneRequest {
    return new CloneRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloneRequest {
    return new CloneRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloneRequest {
    return new CloneRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CloneRequest | PlainMessage<CloneRequest> | undefined, b: CloneRequest | PlainMessage<CloneRequest> | undefined): boolean {
    return proto3.util.equals(CloneRequest, a, b);
  }
}

