// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file goals.proto (package Genesis, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_pb.js";
import { ApprovalMetadata, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base_pb.js";

/**
 *
 * Describes the available input types for a goal item (with possible vbalues being number-absolute, number-percentage, text-input, text-dropdown)
 *
 * @generated from enum Genesis.GOAL_ITEM_INPUT_VALUE_TYPE
 */
export enum GOAL_ITEM_INPUT_VALUE_TYPE {
  /**
   * Input value type is an absolute number (with min and max defined in number_min_value and number_max_value)
   *
   * @generated from enum value: GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED = 0;
   */
  GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED = 0,

  /**
   * Input value type is a percentage
   *
   * @generated from enum value: GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_PERCENTAGE = 1;
   */
  GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_PERCENTAGE = 1,

  /**
   * Input value type is a textual input
   *
   * @generated from enum value: GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_INPUT = 2;
   */
  GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_INPUT = 2,

  /**
   * Input value type is a dropdown (from the values as defined in text_values)
   *
   * @generated from enum value: GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_DROPDOWN = 3;
   */
  GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_DROPDOWN = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(GOAL_ITEM_INPUT_VALUE_TYPE)
proto3.util.setEnumType(GOAL_ITEM_INPUT_VALUE_TYPE, "Genesis.GOAL_ITEM_INPUT_VALUE_TYPE", [
  { no: 0, name: "GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED" },
  { no: 1, name: "GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_PERCENTAGE" },
  { no: 2, name: "GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_INPUT" },
  { no: 3, name: "GOAL_ITEM_INPUT_VALUE_TYPE_TEXT_DROPDOWN" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Genesis.GOAL_SORT_KEY
 */
export enum GOAL_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: GOAL_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  GOAL_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: GOAL_SORT_KEY_CREATED_AT = 1;
   */
  GOAL_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: GOAL_SORT_KEY_MODIFIED_AT = 2;
   */
  GOAL_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: GOAL_SORT_KEY_APPROVED_ON = 3;
   */
  GOAL_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: GOAL_SORT_KEY_APPROVED_BY = 4;
   */
  GOAL_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: GOAL_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  GOAL_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: GOAL_SORT_KEY_COMPLETED_ON = 6;
   */
  GOAL_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: GOAL_SORT_KEY_REFERENCE_ID = 10;
   */
  GOAL_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: GOAL_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  GOAL_SORT_KEY_FINAL_REF_NUMBER = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(GOAL_SORT_KEY)
proto3.util.setEnumType(GOAL_SORT_KEY, "Genesis.GOAL_SORT_KEY", [
  { no: 0, name: "GOAL_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "GOAL_SORT_KEY_CREATED_AT" },
  { no: 2, name: "GOAL_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "GOAL_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "GOAL_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "GOAL_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "GOAL_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "GOAL_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "GOAL_SORT_KEY_FINAL_REF_NUMBER" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Genesis.GoalsServiceCreateRequest
 */
export class GoalsServiceCreateRequest extends Message<GoalsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the goal
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The associated user ID
   *
   * @generated from field: int64 user_id = 12;
   */
  userId = protoInt64.zero;

  /**
   * The date from which the goal comes into force
   *
   * @generated from field: string start_date = 13;
   */
  startDate = "";

  /**
   * The date until which the goal remains into force
   *
   * @generated from field: string end_date = 14;
   */
  endDate = "";

  /**
   * The description of the goal
   *
   * @generated from field: string description = 20;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<GoalsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "start_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "end_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsServiceCreateRequest {
    return new GoalsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsServiceCreateRequest {
    return new GoalsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsServiceCreateRequest {
    return new GoalsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsServiceCreateRequest | PlainMessage<GoalsServiceCreateRequest> | undefined, b: GoalsServiceCreateRequest | PlainMessage<GoalsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(GoalsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Genesis.GoalsServiceUpdateRequest
 */
export class GoalsServiceUpdateRequest extends Message<GoalsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the goal
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The date from which the goal comes into force
   *
   * @generated from field: string start_date = 13;
   */
  startDate = "";

  /**
   * The date until which the goal remains into force
   *
   * @generated from field: string end_date = 14;
   */
  endDate = "";

  /**
   * The description of the goal
   *
   * @generated from field: string description = 20;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<GoalsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "start_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "end_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsServiceUpdateRequest {
    return new GoalsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsServiceUpdateRequest {
    return new GoalsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsServiceUpdateRequest {
    return new GoalsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsServiceUpdateRequest | PlainMessage<GoalsServiceUpdateRequest> | undefined, b: GoalsServiceUpdateRequest | PlainMessage<GoalsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(GoalsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Genesis.Goal
 */
export class Goal extends Message<Goal> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this goal
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Genesis.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this goal
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this goal
   *
   * @generated from field: repeated Genesis.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this goal was marked as completed
   *
   * @generated from field: int64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the goal
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The associated user ID
   *
   * @generated from field: int64 user_id = 12;
   */
  userId = protoInt64.zero;

  /**
   * The date from which the goal comes into force
   *
   * @generated from field: string start_date = 13;
   */
  startDate = "";

  /**
   * The date until which the goal remains into force
   *
   * @generated from field: string end_date = 14;
   */
  endDate = "";

  /**
   * The description of the goal
   *
   * @generated from field: string description = 20;
   */
  description = "";

  /**
   * The list of associated goal items
   *
   * @generated from field: repeated Genesis.GoalItem list = 30;
   */
  list: GoalItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Genesis.FormFieldDatum form_data = 40;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<Goal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.Goal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "start_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "end_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "list", kind: "message", T: GoalItem, repeated: true },
    { no: 40, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Goal {
    return new Goal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Goal {
    return new Goal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Goal {
    return new Goal().fromJsonString(jsonString, options);
  }

  static equals(a: Goal | PlainMessage<Goal> | undefined, b: Goal | PlainMessage<Goal> | undefined): boolean {
    return proto3.util.equals(Goal, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an item to a goal
 *
 * @generated from message Genesis.GoalsServiceItemCreateRequest
 */
export class GoalsServiceItemCreateRequest extends Message<GoalsServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the goal ID
   *
   * @generated from field: int64 goal_id = 10;
   */
  goalId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * Stores an optional label
   *
   * @generated from field: int64 label_id = 12;
   */
  labelId = protoInt64.zero;

  /**
   * The specifications of the item
   *
   * @generated from field: string specifications = 13;
   */
  specifications = "";

  /**
   * The input value type of the item
   *
   * @generated from field: Genesis.GOAL_ITEM_INPUT_VALUE_TYPE input_value_type = 20;
   */
  inputValueType = GOAL_ITEM_INPUT_VALUE_TYPE.GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED;

  /**
   * The minimum value (in cents) in case the input value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_min_value = 21;
   */
  numberMinValue = protoInt64.zero;

  /**
   * The maximum value (in cents) in case the input value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_max_value = 22;
   */
  numberMaxValue = protoInt64.zero;

  /**
   * The acceptable value of the item in case input_value_type is of number type
   *
   * @generated from field: int64 number_acceptable_value = 23;
   */
  numberAcceptableValue = protoInt64.zero;

  /**
   * The possible values from which a user can choose in case the input type is text-dropdown
   *
   * @generated from field: repeated string text_values = 30;
   */
  textValues: string[] = [];

  /**
   * The acceptable value of the item in case input_value_type is of text type
   *
   * @generated from field: string text_acceptable_value = 31;
   */
  textAcceptableValue = "";

  constructor(data?: PartialMessage<GoalsServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "goal_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "label_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "input_value_type", kind: "enum", T: proto3.getEnumType(GOAL_ITEM_INPUT_VALUE_TYPE) },
    { no: 21, name: "number_min_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_max_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsServiceItemCreateRequest {
    return new GoalsServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsServiceItemCreateRequest {
    return new GoalsServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsServiceItemCreateRequest {
    return new GoalsServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsServiceItemCreateRequest | PlainMessage<GoalsServiceItemCreateRequest> | undefined, b: GoalsServiceItemCreateRequest | PlainMessage<GoalsServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(GoalsServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an item in a goal
 *
 * @generated from message Genesis.GoalsServiceItemUpdateRequest
 */
export class GoalsServiceItemUpdateRequest extends Message<GoalsServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * Stores an optional label
   *
   * @generated from field: int64 label_id = 12;
   */
  labelId = protoInt64.zero;

  /**
   * The specifications of the item
   *
   * @generated from field: string specifications = 13;
   */
  specifications = "";

  /**
   * The input value type of the item
   *
   * @generated from field: Genesis.GOAL_ITEM_INPUT_VALUE_TYPE input_value_type = 20;
   */
  inputValueType = GOAL_ITEM_INPUT_VALUE_TYPE.GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED;

  /**
   * The minimum value (in cents) in case the input value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_min_value = 21;
   */
  numberMinValue = protoInt64.zero;

  /**
   * The maximum value (in cents) in case the input value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_max_value = 22;
   */
  numberMaxValue = protoInt64.zero;

  /**
   * The acceptable value of the item in case input_value_type is of number type
   *
   * @generated from field: int64 number_acceptable_value = 23;
   */
  numberAcceptableValue = protoInt64.zero;

  /**
   * The possible values from which a user can choose in case the input type is text-dropdown
   *
   * @generated from field: repeated string text_values = 30;
   */
  textValues: string[] = [];

  /**
   * The acceptable value of the item in case input_value_type is of text type
   *
   * @generated from field: string text_acceptable_value = 31;
   */
  textAcceptableValue = "";

  constructor(data?: PartialMessage<GoalsServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "label_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "input_value_type", kind: "enum", T: proto3.getEnumType(GOAL_ITEM_INPUT_VALUE_TYPE) },
    { no: 21, name: "number_min_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_max_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsServiceItemUpdateRequest {
    return new GoalsServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsServiceItemUpdateRequest {
    return new GoalsServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsServiceItemUpdateRequest {
    return new GoalsServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsServiceItemUpdateRequest | PlainMessage<GoalsServiceItemUpdateRequest> | undefined, b: GoalsServiceItemUpdateRequest | PlainMessage<GoalsServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(GoalsServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an item associated to a goal
 *
 * @generated from message Genesis.GoalItem
 */
export class GoalItem extends Message<GoalItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this goal
   *
   * @generated from field: Genesis.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Genesis.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the goal ID
   *
   * @generated from field: int64 goal_id = 10;
   */
  goalId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * Stores an optional label
   *
   * @generated from field: int64 label_id = 12;
   */
  labelId = protoInt64.zero;

  /**
   * The specifications of the item
   *
   * @generated from field: string specifications = 13;
   */
  specifications = "";

  /**
   * The input value type of the item
   *
   * @generated from field: Genesis.GOAL_ITEM_INPUT_VALUE_TYPE input_value_type = 20;
   */
  inputValueType = GOAL_ITEM_INPUT_VALUE_TYPE.GOAL_ITEM_INPUT_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED;

  /**
   * The minimum value (in cents) in case the input value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_min_value = 21;
   */
  numberMinValue = protoInt64.zero;

  /**
   * The maximum value (in cents) in case the input value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_max_value = 22;
   */
  numberMaxValue = protoInt64.zero;

  /**
   * The acceptable value of the item in case input_value_type is of number type
   *
   * @generated from field: int64 number_acceptable_value = 23;
   */
  numberAcceptableValue = protoInt64.zero;

  /**
   * The possible values from which a user can choose in case the input type is text-dropdown
   *
   * @generated from field: repeated string text_values = 30;
   */
  textValues: string[] = [];

  /**
   * The acceptable value of the item in case input_value_type is of text type
   *
   * @generated from field: string text_acceptable_value = 31;
   */
  textAcceptableValue = "";

  constructor(data?: PartialMessage<GoalItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "goal_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "label_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "input_value_type", kind: "enum", T: proto3.getEnumType(GOAL_ITEM_INPUT_VALUE_TYPE) },
    { no: 21, name: "number_min_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_max_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalItem {
    return new GoalItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalItem {
    return new GoalItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalItem {
    return new GoalItem().fromJsonString(jsonString, options);
  }

  static equals(a: GoalItem | PlainMessage<GoalItem> | undefined, b: GoalItem | PlainMessage<GoalItem> | undefined): boolean {
    return proto3.util.equals(GoalItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of goals
 *
 * @generated from message Genesis.GoalsList
 */
export class GoalsList extends Message<GoalsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Genesis.Goal list = 1;
   */
  list: Goal[] = [];

  constructor(data?: PartialMessage<GoalsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Goal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsList {
    return new GoalsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsList {
    return new GoalsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsList {
    return new GoalsList().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsList | PlainMessage<GoalsList> | undefined, b: GoalsList | PlainMessage<GoalsList> | undefined): boolean {
    return proto3.util.equals(GoalsList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of goal items
 *
 * @generated from message Genesis.GoalsItemsList
 */
export class GoalsItemsList extends Message<GoalsItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Genesis.GoalItem list = 1;
   */
  list: GoalItem[] = [];

  constructor(data?: PartialMessage<GoalsItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: GoalItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsItemsList {
    return new GoalsItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsItemsList {
    return new GoalsItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsItemsList {
    return new GoalsItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsItemsList | PlainMessage<GoalsItemsList> | undefined, b: GoalsItemsList | PlainMessage<GoalsItemsList> | undefined): boolean {
    return proto3.util.equals(GoalsItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Genesis.GoalItemHistoryRequest
 */
export class GoalItemHistoryRequest extends Message<GoalItemHistoryRequest> {
  /**
   * Stores the goal ID
   *
   * @generated from field: int64 goal_id = 10;
   */
  goalId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  constructor(data?: PartialMessage<GoalItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "goal_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalItemHistoryRequest {
    return new GoalItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalItemHistoryRequest {
    return new GoalItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalItemHistoryRequest {
    return new GoalItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GoalItemHistoryRequest | PlainMessage<GoalItemHistoryRequest> | undefined, b: GoalItemHistoryRequest | PlainMessage<GoalItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(GoalItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Genesis.GoalsServicePaginationReq
 */
export class GoalsServicePaginationReq extends Message<GoalsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.GOAL_SORT_KEY sort_key = 5;
   */
  sortKey = GOAL_SORT_KEY.GOAL_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this goal
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  constructor(data?: PartialMessage<GoalsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GOAL_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsServicePaginationReq {
    return new GoalsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsServicePaginationReq {
    return new GoalsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsServicePaginationReq {
    return new GoalsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsServicePaginationReq | PlainMessage<GoalsServicePaginationReq> | undefined, b: GoalsServicePaginationReq | PlainMessage<GoalsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(GoalsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Genesis.GoalsServicePaginationResponse
 */
export class GoalsServicePaginationResponse extends Message<GoalsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: int64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Genesis.Goal payload = 4;
   */
  payload: Goal[] = [];

  constructor(data?: PartialMessage<GoalsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "payload", kind: "message", T: Goal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsServicePaginationResponse {
    return new GoalsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsServicePaginationResponse {
    return new GoalsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsServicePaginationResponse {
    return new GoalsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsServicePaginationResponse | PlainMessage<GoalsServicePaginationResponse> | undefined, b: GoalsServicePaginationResponse | PlainMessage<GoalsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(GoalsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records associated with an entity UUID
 *
 * @generated from message Genesis.GoalsServiceEntityPaginationReq
 */
export class GoalsServiceEntityPaginationReq extends Message<GoalsServiceEntityPaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.GOAL_SORT_KEY sort_key = 5;
   */
  sortKey = GOAL_SORT_KEY.GOAL_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<GoalsServiceEntityPaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsServiceEntityPaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GOAL_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsServiceEntityPaginationReq {
    return new GoalsServiceEntityPaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsServiceEntityPaginationReq {
    return new GoalsServiceEntityPaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsServiceEntityPaginationReq {
    return new GoalsServiceEntityPaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsServiceEntityPaginationReq | PlainMessage<GoalsServiceEntityPaginationReq> | undefined, b: GoalsServiceEntityPaginationReq | PlainMessage<GoalsServiceEntityPaginationReq> | undefined): boolean {
    return proto3.util.equals(GoalsServiceEntityPaginationReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Genesis.GoalsServiceFilterReq
 */
export class GoalsServiceFilterReq extends Message<GoalsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.GOAL_SORT_KEY sort_key = 5;
   */
  sortKey = GOAL_SORT_KEY.GOAL_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this goal
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: int64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: int64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: int64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: int64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: int64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: int64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the goal
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The associated user ID
   *
   * @generated from field: int64 user_id = 22;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<GoalsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GOAL_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsServiceFilterReq {
    return new GoalsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsServiceFilterReq {
    return new GoalsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsServiceFilterReq {
    return new GoalsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsServiceFilterReq | PlainMessage<GoalsServiceFilterReq> | undefined, b: GoalsServiceFilterReq | PlainMessage<GoalsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(GoalsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Genesis.GoalsServiceSearchAllReq
 */
export class GoalsServiceSearchAllReq extends Message<GoalsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Genesis.GOAL_SORT_KEY sort_key = 5;
   */
  sortKey = GOAL_SORT_KEY.GOAL_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Genesis.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.PREVERIFY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The associated user ID
   *
   * @generated from field: int64 user_id = 22;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<GoalsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Genesis.GoalsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GOAL_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalsServiceSearchAllReq {
    return new GoalsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalsServiceSearchAllReq {
    return new GoalsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalsServiceSearchAllReq {
    return new GoalsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: GoalsServiceSearchAllReq | PlainMessage<GoalsServiceSearchAllReq> | undefined, b: GoalsServiceSearchAllReq | PlainMessage<GoalsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(GoalsServiceSearchAllReq, a, b);
  }
}

